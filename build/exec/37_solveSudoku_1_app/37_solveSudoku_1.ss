#!/usr/bin/scheme --script

(import (chezscheme))
(case (machine-type)
  [(i3le ti3le a6le ta6le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define blodwen-read-args (lambda (desc)
  (case (vector-ref desc 0)
    ((0) '())
    ((1) (cons (vector-ref desc 2)
               (blodwen-read-args (vector-ref desc 3)))))))
(define b+ (lambda (x y bits) (remainder (+ x y) (expt 2 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (expt 2 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (expt 2 bits))))
(define b/ (lambda (x y bits) (remainder (floor (/ x y)) (expt 2 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))
(define cast-string-int
  (lambda (x)
    (floor (cast-num (string->number (destroy-prefix x))))))
(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define get-tag (lambda (x) (vector-ref x 0)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (substring s b end)))

(define either-left
  (lambda (x)
    (vector 0 #f #f x)))

(define either-right
  (lambda (x)
    (vector 1 #f #f x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

(define (blodwen-readbuffer-bytes h buf loc max)
  (guard (x (#t -1))
    (get-bytevector-n! h buf loc max)))

(define (blodwen-readbuffer h)
  (guard (x (#t (bytevector)))
    (get-bytevector-all h)))

(define (blodwen-writebuffer h buf loc max)
  (guard (x (#t -1))
     (put-bytevector h buf loc max)
     max))

;; Files: Much of the following adapted from idris-chez, thanks to Niklas
;; Larsson

;; All the file operations are implemented as primitives which return
;; Either Int x, where the Int is an error code:
(define (blodwen-error-code x)
    (cond
        ((i/o-read-error? x) 1)
        ((i/o-write-error? x) 2)
        ((i/o-file-does-not-exist-error? x) 3)
        ((i/o-file-protection-error? x) 4)
        (else 255)))

;; If the file operation raises an error, catch it and return an appropriate
;; error code
(define (blodwen-file-op op)
  (guard
    (x ((i/o-error? x) (either-left (blodwen-error-code x))))
    (either-right (op))))

(define (blodwen-get-n n p)
    (if (port? p) (get-string-n p n) ""))

(define (blodwen-putstring p s)
    (if (port? p) (put-string p s) void)
    0)

(define (blodwen-open file mode bin)
    (define tc (if (= bin 1) #f (make-transcoder (utf-8-codec))))
    (define bm (buffer-mode line))
    (case mode
        (("r") (open-file-input-port file (file-options) bm tc))
        (("w") (open-file-output-port file (file-options no-fail) bm tc))
        (("wx") (open-file-output-port file (file-options) bm tc))
        (("a") (open-file-output-port file (file-options no-fail no-truncate) bm tc))
        (("r+") (open-file-input/output-port file (file-options no-create) bm tc))
        (("w+") (open-file-input/output-port file (file-options no-fail) bm tc))
        (("w+x") (open-file-input/output-port file (file-options) bm tc))
        (("a+") (open-file-input/output-port file (file-options no-fail no-truncate) bm tc))
        (else (raise (make-i/o-error)))))

(define (blodwen-close-port p)
    (when (port? p) (close-port p)))

(define (blodwen-get-line p)
    (if (and (port? p) (not (port-eof? p)))
        (let ((str (get-line p)))
            (string-append str "\n"))
        ""))

(define (blodwen-get-char p)
    (if (and (port? p) (not (port-eof? p)))
        (get-char p)
        #\nul))

(define (blodwen-file-modified-time p)
    (time-second (file-modification-time p)))

(define (blodwen-file-size p)
    (port-length p))

(define (blodwen-eof p)
    (if (port-eof? p)
        1
        0))

;; Directories

(define (blodwen-current-directory)
  (current-directory))

(define (blodwen-change-directory dir)
  (if (file-directory? dir)
      (begin (current-directory dir) 1)
      0))

(define (blodwen-create-directory dir)
  (blodwen-file-op (lambda () (mkdir dir) 0)))

; Scheme only gives a primitive for reading all the files in a directory,
; so this is faking the C interface!
(define (blodwen-open-directory dir)
  (blodwen-file-op (lambda () (box (directory-list dir)))))

(define (blodwen-close-directory dir) '()) ; no-op, it's not really open

(define (blodwen-next-dir-entry dir)
  (let [(dlist (unbox dir))]
    (if (null? dlist)
      (either-left 255)
      (begin (set-box! dir (cdr dlist))
             (either-right (car dlist))))))

;; Threads

(define blodwen-thread-data (make-thread-parameter #f))

(define (blodwen-thread p)
    (fork-thread (lambda () (p (vector 0)))))

(define (blodwen-get-thread-data)
  (blodwen-thread-data))

(define (blodwen-set-thread-data a)
  (blodwen-thread-data a))

(define (blodwen-mutex) (make-mutex))
(define (blodwen-lock m) (mutex-acquire m))
(define (blodwen-unlock m) (mutex-release m))
(define (blodwen-thisthread) (get-thread-id))

(define (blodwen-condition) (make-condition))
(define (blodwen-condition-wait c m) (condition-wait c m))
(define (blodwen-condition-wait-timeout c m t) (condition-wait c m t))
(define (blodwen-condition-signal c) (condition-signal c))
(define (blodwen-condition-broadcast c) (condition-broadcast c))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-time) (time-second (current-time)))

(define (blodwen-args)
  (define (blodwen-build-args args)
    (if (null? args)
        (vector 0 '())
        (vector 1 '() (car args) (blodwen-build-args (cdr args)))))
    (blodwen-build-args (command-line)))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

(define (blodwen-system cmd)
  (system cmd))
(define prim__add_Int (lambda (v-0 v-1) (b+ v-0 v-1 63)))
(define prim__add_Integer (lambda (v-0 v-1) (+ v-0 v-1)))
(define prim__sub_Int (lambda (v-0 v-1) (b- v-0 v-1 63)))
(define prim__sub_Integer (lambda (v-0 v-1) (- v-0 v-1)))
(define prim__mul_Int (lambda (v-0 v-1) (b* v-0 v-1 63)))
(define prim__mul_Integer (lambda (v-0 v-1) (* v-0 v-1)))
(define prim__div_Int (lambda (v-0 v-1) (b/ v-0 v-1 63)))
(define prim__mod_Int (lambda (v-0 v-1) (remainder v-0 v-1)))
(define prim__lt_Int (lambda (v-0 v-1) (or (and (< v-0 v-1) 1) 0)))
(define prim__lt_Integer (lambda (v-0 v-1) (or (and (< v-0 v-1) 1) 0)))
(define prim__lt_Char (lambda (v-0 v-1) (or (and (char<? v-0 v-1) 1) 0)))
(define prim__lte_Int (lambda (v-0 v-1) (or (and (<= v-0 v-1) 1) 0)))
(define prim__lte_Integer (lambda (v-0 v-1) (or (and (<= v-0 v-1) 1) 0)))
(define prim__lte_Char (lambda (v-0 v-1) (or (and (char<=? v-0 v-1) 1) 0)))
(define prim__eq_Int (lambda (v-0 v-1) (or (and (= v-0 v-1) 1) 0)))
(define prim__eq_Integer (lambda (v-0 v-1) (or (and (= v-0 v-1) 1) 0)))
(define prim__eq_Char (lambda (v-0 v-1) (or (and (char=? v-0 v-1) 1) 0)))
(define prim__gte_Int (lambda (v-0 v-1) (or (and (>= v-0 v-1) 1) 0)))
(define prim__gte_Integer (lambda (v-0 v-1) (or (and (>= v-0 v-1) 1) 0)))
(define prim__gte_Char (lambda (v-0 v-1) (or (and (char>=? v-0 v-1) 1) 0)))
(define prim__gt_Int (lambda (v-0 v-1) (or (and (> v-0 v-1) 1) 0)))
(define prim__gt_Integer (lambda (v-0 v-1) (or (and (> v-0 v-1) 1) 0)))
(define prim__gt_Char (lambda (v-0 v-1) (or (and (char>? v-0 v-1) 1) 0)))
(define prim__strLength (lambda (v-0) (string-length v-0)))
(define prim__strHead (lambda (v-0) (string-ref v-0 0)))
(define prim__strIndex (lambda (v-0 v-1) (string-ref v-0 v-1)))
(define prim__strCons (lambda (v-0 v-1) (string-cons v-0 v-1)))
(define prim__strAppend (lambda (v-0 v-1) (string-append v-0 v-1)))
(define prim__cast_IntString (lambda (v-0) (number->string v-0)))
(define prim__cast_IntInteger (lambda (v-0) v-0))
(define prim__cast_IntegerInt (lambda (v-0) v-0))
(define prim__cast_CharInt (lambda (v-0) (char->integer v-0)))
(define n--3648-1926-toRowHelper (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294)))(else (vector 1 4294 (n--3656-1931-matToRow v-0 v-1 v-2 (List-Data-transpose 4294 (List-Data-take 4294 v-1 v-2))) (n--3648-1926-toRowHelper v-0 v-1 (List-Data-drop 4294 v-1 v-2))))))))
(define n--4280-2564-solveC-39 (lambda (v-0 v-1) (Main-case--4282-2568 v-0 v-1 (Main-isGridInvalid v-1))))
(define n--3015-1274-showCell (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((v-1 (vector-ref sc0 1))) (Prelude-show_Show__Int v-1)))(else ".")))))
(define n--3759-2050-replace2D (lambda (v-0 v-1 v-2 v-3) (Main-case--3764-2325 v-0 4294 v-3 v-2 (vector 0 4294 4294 (Prelude-div_Integral__Int v-2 ((Prelude-fromInteger_Num__Int) 9)) (Prelude-mod_Integral__Int v-2 ((Prelude-fromInteger_Num__Int) 9))))))
(define n--3764-2213-replace (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((v-8 (((List-Data-zip 4294 4294) v-7) (Prelude-take 4294 (Prelude-fromInteger_Num__Nat 100) (Prelude-rangeFrom_Range__C-36a 4294 (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-8) (lambda (v-9) (((Prelude-C-43_Num__Int) v-8) v-9))) (lambda (v-8) (lambda (v-9) (((Prelude-C-42_Num__Int) v-8) v-9))) (lambda (v-8) ((Prelude-fromInteger_Num__Int) v-8))) (lambda (v-8) (lambda (v-9) (Prelude-div_Integral__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-mod_Integral__Int v-8 v-9)))) (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-8) (lambda (v-9) (Prelude-C-61C-61_Eq__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-47C-61_Eq__Int v-8 v-9)))) (lambda (v-8) (lambda (v-9) (Prelude-compare_Ord__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-60_Ord__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-62_Ord__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-60C-61_Ord__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-62C-61_Ord__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-max_Ord__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-min_Ord__Int v-8 v-9)))) (vector 0 4294 (vector 0 4294 (lambda (v-8) (lambda (v-9) (((Prelude-C-43_Num__Int) v-8) v-9))) (lambda (v-8) (lambda (v-9) (((Prelude-C-42_Num__Int) v-8) v-9))) (lambda (v-8) ((Prelude-fromInteger_Num__Int) v-8))) (lambda (v-8) (Prelude-negate_Neg__Int v-8)) (lambda (v-8) (lambda (v-9) (((Prelude-C-45_Neg__Int) v-8) v-9)))))) ((Prelude-fromInteger_Num__Int) 0)))))) (Prelude-map_Functor__List 4294 4294 (lambda (v-9) (Main-case--3930-2257 v-0 4294 v-2 v-3 4294 v-7 v-6 v-5 v-8 v-9 (Prelude-C-61C-61_Eq__Int v-5 (Builtin-snd 4294 4294 v-9)))) v-8))))
(define n--2912-1178-readCell (lambda (v-0 v-1) (let ((sc0 v-1)) (cond ((equal? sc0 #\.) (vector 1 4294 (vector 1 (Prelude-rangeFromTo_Range__C-36a 4294 (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-2) (lambda (v-3) (((Prelude-C-43_Num__Int) v-2) v-3))) (lambda (v-2) (lambda (v-3) (((Prelude-C-42_Num__Int) v-2) v-3))) (lambda (v-2) ((Prelude-fromInteger_Num__Int) v-2))) (lambda (v-2) (lambda (v-3) (Prelude-div_Integral__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-mod_Integral__Int v-2 v-3)))) (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-2) (lambda (v-3) (Prelude-C-61C-61_Eq__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-C-47C-61_Eq__Int v-2 v-3)))) (lambda (v-2) (lambda (v-3) (Prelude-compare_Ord__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-C-60_Ord__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-C-62_Ord__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-61_Ord__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-C-62C-61_Ord__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-max_Ord__Int v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-min_Ord__Int v-2 v-3)))) (vector 0 4294 (vector 0 4294 (lambda (v-2) (lambda (v-3) (((Prelude-C-43_Num__Int) v-2) v-3))) (lambda (v-2) (lambda (v-3) (((Prelude-C-42_Num__Int) v-2) v-3))) (lambda (v-2) ((Prelude-fromInteger_Num__Int) v-2))) (lambda (v-2) (Prelude-negate_Neg__Int v-2)) (lambda (v-2) (lambda (v-3) (((Prelude-C-45_Neg__Int) v-2) v-3)))))) ((Prelude-fromInteger_Num__Int) 1) ((Prelude-fromInteger_Num__Int) 9)))))(else (Main-with--2924-1202 v-0 v-1 (Prelude-isDigit v-1)))))))
(define n--3496-1760-pruneCell (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (vector 1 4294 v-1))) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (((List-Data-intersect 4294 (let ((v-3 (vector 1 v-2))) (vector 0 4294 (lambda (v-4) (lambda (v-5) (Prelude-C-61C-61_Eq__Int v-4 v-5))) (lambda (v-4) (lambda (v-5) (Prelude-C-47C-61_Eq__Int v-4 v-5)))))) v-2) ((Prelude-concat 4294 4294 (let ((v-3 (vector 1 v-2))) (vector 0 4294 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldr_Foldable__List 4294 4294 v-6 v-7 v-8)))))) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldl_Foldable__List 4294 4294 v-6 v-7 v-8))))))) (vector 0 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (((Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 4294) v-4) v-5)))) (Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 4294))))) (n--3496-1759-exclusives v-0))))) (let ((v-4 (vector 1 v-2))) (Main-case--3499-1786 v-0 v-2 v-4 v-3 (Prelude-elem 4294 (let ((v-5 (vector 1 v-2))) (vector 0 4294 (lambda (v-6) (lambda (v-7) (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-8) (lambda (v-9) (Prelude-C-61C-61_Eq__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-47C-61_Eq__Int v-8 v-9)))) v-6 v-7))) (lambda (v-6) (lambda (v-7) (Prelude-C-47C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-8) (lambda (v-9) (Prelude-C-61C-61_Eq__Int v-8 v-9))) (lambda (v-8) (lambda (v-9) (Prelude-C-47C-61_Eq__Int v-8 v-9)))) v-6 v-7))))) v-3 (n--3496-1759-exclusives v-0)))))))))))
(define n--3431-1701-pruneCell (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((1) (let ((v-2 (vector-ref sc0 1))) (Main-makeCell (n--3433-1704-deleteTmp v-0 v-2 v-2 (n--3433-1705-fixedsTmp v-0 v-2 v-0)))))(else (vector 1 4294 v-1))))))
(define n--3762-2098-possibilityCount (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((1) (let ((v-5 (vector-ref sc0 1))) (List-Data-length 4294 v-5))) ((0) (let ((v-5 (vector-ref sc0 1))) (Prelude-fromInteger_Num__Nat 1)))))))
(define n--3759-2048-minimumPossible (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (vector 0 4294 4294 ((Prelude-fromInteger_Num__Int) 0) (vector 1 (Prelude-take 4294 (Prelude-fromInteger_Num__Nat 10) (Prelude-rangeFrom_Range__C-36a 4294 (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (((Prelude-C-43_Num__Int) v-3) v-4))) (lambda (v-3) (lambda (v-4) (((Prelude-C-42_Num__Int) v-3) v-4))) (lambda (v-3) ((Prelude-fromInteger_Num__Int) v-3))) (lambda (v-3) (lambda (v-4) (Prelude-div_Integral__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-mod_Integral__Int v-3 v-4)))) (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (Prelude-C-61C-61_Eq__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-C-47C-61_Eq__Int v-3 v-4)))) (lambda (v-3) (lambda (v-4) (Prelude-compare_Ord__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-C-60_Ord__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-C-62_Ord__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-C-60C-61_Ord__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-C-62C-61_Ord__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-max_Ord__Int v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-min_Ord__Int v-3 v-4)))) (vector 0 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (((Prelude-C-43_Num__Int) v-3) v-4))) (lambda (v-3) (lambda (v-4) (((Prelude-C-42_Num__Int) v-3) v-4))) (lambda (v-3) ((Prelude-fromInteger_Num__Int) v-3))) (lambda (v-3) (Prelude-negate_Neg__Int v-3)) (lambda (v-3) (lambda (v-4) (((Prelude-C-45_Neg__Int) v-3) v-4)))))) ((Prelude-fromInteger_Num__Int) 1))))))) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-5 (vector-ref sc1 1))) v-3)) ((1) (let ((v-5 (vector-ref sc1 1))) (let ((v-6 (vector-ref sc1 2))) (let ((v-7 (vector-ref sc1 3))) (Main-case--3762-2131 v-0 v-3 v-6 v-7 (Prelude-C-60C-61_Ord__Nat (n--3762-2098-possibilityCount v-0 v-3 v-6 v-7 (Builtin-snd 4294 4294 v-3)) (n--3762-2098-possibilityCount v-0 v-3 v-6 v-7 (Builtin-snd 4294 4294 v-6))))))))))))))))))
(define n--3656-1931-matToRow (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (List-Prelude-C-43C-43 4294 v-5 (n--3656-1931-matToRow v-0 v-1 v-2 v-6))))))))))
(define n--4175-2461-isRowInvalid (lambda (v-0 v-1) (let ((v-2 (n--4177-2463-fixedsTmp v-0 v-1 v-1))) (let ((v-3 (List-Data-filter 4294 (lambda (v-3) (Prelude-C-38C-38 (Prelude-C-60_Ord__Int v-3 ((Prelude-fromInteger_Num__Int) 10)) (lambda () (Prelude-C-62_Ord__Int v-3 ((Prelude-fromInteger_Num__Int) 0))))) (n--4177-2463-fixedsTmp v-0 v-1 v-1)))) (Prelude-C-124C-124 ((Prelude-any 4294 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldr_Foldable__List 4294 4294 v-6 v-7 v-8)))))) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldl_Foldable__List 4294 4294 v-6 v-7 v-8))))))) (lambda (v-4) (Prelude-C-61C-61_Eq__Int v-4 ((Prelude-fromInteger_Num__Int) 0)))) v-2) (lambda () (Prelude-C-47C-61_Eq__Nat (List-Data-length 4294 v-3) (List-Data-length 4294 ((List-Data-nub 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (Prelude-C-61C-61_Eq__Int v-4 v-5))) (lambda (v-4) (lambda (v-5) (Prelude-C-47C-61_Eq__Int v-4 v-5))))) v-3)))))))))
(define n--3759-2047-isPossible (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((1) (let ((v-2 (vector-ref sc0 1))) (vector 0 )))(else (vector 1 ))))))
(define n--4153-2438-isCellFilled (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (vector 0 ))) ((1) (let ((v-2 (vector-ref sc0 1))) (vector 1 )))))))
(define n--3044-1310-insertWith (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-7)) (case (get-tag sc0) ((0) (let ((v-8 (vector-ref sc0 1))) (vector 1 4294 (vector 0 4294 4294 v-5 v-6) (vector 0 4294)))) ((1) (let ((v-8 (vector-ref sc0 1))) (let ((v-9 (vector-ref sc0 2))) (let ((v-10 (vector-ref sc0 3))) (let ((sc1 v-9)) (case (get-tag sc1) ((0) (let ((v-11 (vector-ref sc1 1))) (let ((v-12 (vector-ref sc1 2))) (let ((v-13 (vector-ref sc1 3))) (let ((v-14 (vector-ref sc1 4))) (let ((v-15 (vector 0 4294 4294 v-13 v-14))) (Main-case--3046-1364 v-0 4294 4294 v-3 v-5 v-6 v-13 v-14 v-15 v-10 v-4 (let ((sc2 (let ((v-16 (vector 0 4294 4294 v-13 v-14))) v-3))) (case (get-tag sc2) ((0) (let ((v-16 (vector-ref sc2 1))) (let ((v-17 (vector-ref sc2 2))) (let ((v-18 (vector-ref sc2 3))) ((v-17 v-5) v-13))))))))))))))))))))))))
(define n--3044-1313-flipTableKey (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) v-1)) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (n--3044-1313-flipTableKey v-0 (n--3044-1310-insertWith v-0 4294 4294 (let ((v-10 (vector 0 4294 4294 v-8 v-9))) (vector 0 4294 (lambda (v-11) (lambda (v-12) (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-13) (lambda (v-14) (Prelude-C-61C-61_Eq__Int v-13 v-14))) (lambda (v-13) (lambda (v-14) (Prelude-C-47C-61_Eq__Int v-13 v-14)))) v-11 v-12))) (lambda (v-11) (lambda (v-12) (Prelude-C-47C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-13) (lambda (v-14) (Prelude-C-61C-61_Eq__Int v-13 v-14))) (lambda (v-13) (lambda (v-14) (Prelude-C-47C-61_Eq__Int v-13 v-14)))) v-11 v-12))))) (lambda (v-10) (lambda (v-11) (List-Prelude-C-43C-43 4294 v-10 v-11))) v-9 (vector 1 4294 v-8 (vector 0 4294)) v-1) v-5))))))))))))))))
(define n--3044-1311-flipPossibleTable (lambda (v-0) (lambda (v-1) (Prelude-foldl_Foldable__List 4294 4294 (lambda (v-2) (lambda (v-3) (Main-case--3047-1449 v-0 v-2 v-3))) (vector 0 4294) v-1))))
(define n--4177-2463-fixedsTmp (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (Main-case--4179-2473 v-0 v-1 v-4 v-5)))))))))
(define n--3433-1705-fixedsTmp (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (Main-case--3437-1731 v-0 v-1 v-4 v-5)))))))))
(define n--3720-2002-fixM (lambda (v-0 v-1) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 (v-0 v-1) (lambda (v-2) (Main-case--3721-2024 v-1 v-0 v-2 (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Main-C-61C-61_Eq__Cell v-5 v-6))) (lambda (v-5) (lambda (v-6) (Main-C-47C-61_Eq__Cell v-5 v-6)))) v-3 v-4))) (lambda (v-3) (lambda (v-4) (Prelude-C-47C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (Main-C-61C-61_Eq__Cell v-5 v-6))) (lambda (v-5) (lambda (v-6) (Main-C-47C-61_Eq__Cell v-5 v-6)))) v-3 v-4)))) v-2 v-1))))))
(define n--3573-1832-fixM (lambda (v-0 v-1 v-2) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 (v-1 v-2) (lambda (v-3) (Main-case--3575-1852 v-0 v-2 v-1 v-3 (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (Main-C-61C-61_Eq__Cell v-4 v-5))) (lambda (v-4) (lambda (v-5) (Main-C-47C-61_Eq__Cell v-4 v-5)))) v-3 v-2))))))
(define n--3759-2049-fixCell (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((sc1 v-5)) (case (get-tag sc1) ((1) (let ((v-6 (vector-ref sc1 1))) (let ((sc2 v-6)) (case (get-tag sc2) ((1) (let ((v-7 (vector-ref sc2 1))) (let ((v-8 (vector-ref sc2 2))) (let ((v-9 (vector-ref sc2 3))) (let ((sc3 v-9)) (case (get-tag sc3) ((1) (let ((v-10 (vector-ref sc3 1))) (let ((v-11 (vector-ref sc3 2))) (let ((v-12 (vector-ref sc3 3))) (let ((sc4 v-12)) (case (get-tag sc4) ((0) (let ((v-13 (vector-ref sc4 1))) (vector 0 4294 4294 v-4 (vector 0 4294 4294 (vector 0 v-8) (vector 0 v-11)))))(else (vector 0 4294 4294 v-4 (vector 0 4294 4294 (vector 0 v-8) (vector 1 v-9))))))))))(else (vector 0 4294 4294 v-4 (vector 0 4294 4294 (vector 0 v-8) (vector 1 v-9)))))))))))))) ((0) (let ((v-6 (vector-ref sc1 1))) (vector 0 4294 4294 v-4 (vector 0 4294 4294 (vector 0 v-6) (vector 0 v-6))))))))))))))))
(define n--3044-1312-filterLength (lambda (v-0) (lambda (v-1) (List-Data-filter 4294 (lambda (v-2) (Prelude-C-60_Ord__Integer (List-Data-length 4294 (Builtin-snd 4294 4294 v-2)) ((Prelude-fromInteger_Num__Integer) 4))) v-1))))
(define n--3044-1314-filterKey (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (let ((v-10 (vector 0 4294 4294 v-8 v-9))) (Main-case--3050-1569 v-0 4294 v-8 v-9 v-10 v-5 (let ((sc2 (let ((v-11 (vector 0 4294 4294 v-8 v-9))) (vector 0 4294 (lambda (v-12) (lambda (v-13) (Prelude-C-61C-61_Eq__Nat v-12 v-13))) (lambda (v-12) (lambda (v-13) (Prelude-C-47C-61_Eq__Nat v-12 v-13))))))) (case (get-tag sc2) ((0) (let ((v-11 (vector-ref sc2 1))) (let ((v-12 (vector-ref sc2 2))) (let ((v-13 (vector-ref sc2 3))) ((v-12 (List-Data-length 4294 v-8)) (List-Data-length 4294 v-9)))))))))))))))))))))))))
(define n--3496-1759-exclusives (lambda (v-0) (Main-exclusivePossibilities v-0)))
(define n--3044-1315-elem (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (vector 1 4294 v-9 (n--3044-1315-elem v-0 4294 v-5)))))))))))))))))
(define n--3433-1704-deleteTmp (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294)))(else (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) v-2)) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (n--3433-1704-deleteTmp v-0 v-1 (((List-Data-delete 4294 (vector 0 4294 (lambda (v-7) (lambda (v-8) (Prelude-C-61C-61_Eq__Int v-7 v-8))) (lambda (v-7) (lambda (v-8) (Prelude-C-47C-61_Eq__Int v-7 v-8))))) v-5) v-2) v-6))))))))))))
(define n--2912-1179-chunksOfStr (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (cond ((equal? sc0 "") (vector 0 4294))(else (Prelude-map_Functor__List 4294 4294 (lambda (v-3) (Prelude-pack v-3)) (n--2925-1226-chunksOf v-0 v-2 v-1 4294 v-1 (Prelude-unpack v-2))))))))
(define n--2925-1226-chunksOf (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (vector 0 4294)))(else (vector 1 4294 (List-Data-take 4294 v-4 v-5) (n--2925-1226-chunksOf v-0 v-1 v-2 4294 v-4 (List-Data-drop 4294 v-4 v-5))))))))
(define Main-with--2924-1202 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 4294 (vector 0 (((Prelude-C-45_Neg__Int) ((Prelude-cast_Cast__Char_Int) v-1)) ((Prelude-cast_Cast__Char_Int) #\0))))) ((1) (vector 0 4294))))))
(define Main-with--2903-1167 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((1) (vector 0 4294)) ((0) (Prelude-traverse_Traversable__List 4294 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-map_Functor__Maybe 4294 4294 v-4 v-5)))))) (lambda (v-2) (lambda (v-3) ((Prelude-pure_Applicative__Maybe 4294) v-3))) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-4 v-5)))))) (lambda (v-2) (Prelude-traverse_Traversable__List 4294 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (Prelude-map_Functor__Maybe 4294 4294 v-5 v-6)))))) (lambda (v-3) (lambda (v-4) ((Prelude-pure_Applicative__Maybe 4294) v-4))) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-5 v-6)))))) (lambda (v-3) (n--2912-1178-readCell v-0 v-3)) v-2)) (Prelude-map_Functor__List 4294 4294 (lambda (v-2) (Prelude-unpack v-2)) (n--2912-1179-chunksOfStr v-0 (Prelude-fromInteger_Num__Nat 9) v-0))))))))
(define Main-case--4359-2657 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (PrimIO-putStrLn "No solution found"))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (PrimIO-putStrLn ((Main-showGrid) v-5)))))))))
(define Main-case--4344-2640 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (PrimIO-putStrLn "Invalid input"))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (Main-case--4359-2657 v-0 v-1 v-4 (Main-solve v-4)))))))))
(define Main-case--4300-2598 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (Prelude-C-60C-124C-62_Alternative__Maybe 4294 (Main-solve v-5) (Main-solve v-6)))))))))))
(define Main-case--4285-2582 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 4294 v-1)) ((1) (Main-case--4300-2598 v-0 v-1 (Main-nextGrids v-1)))))))
(define Main-case--4282-2568 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 0 4294)) ((1) (Main-case--4285-2582 v-0 v-1 (Main-isGridFilled v-1)))))))
(define Main-case--4179-2473 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 1 4294 v-4 (n--4177-2463-fixedsTmp v-0 v-1 v-3)))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-5 (vector-ref sc1 1))) (vector 1 4294 (let ((sc2 (let ((v-6 (vector 1 (vector 0 4294)))) (vector 0 4294 (lambda (v-7) (lambda (v-8) (((Prelude-C-43_Num__Int) v-7) v-8))) (lambda (v-7) (lambda (v-8) (((Prelude-C-42_Num__Int) v-7) v-8))) (lambda (v-7) ((Prelude-fromInteger_Num__Int) v-7)))))) (case (get-tag sc2) ((0) (let ((v-6 (vector-ref sc2 1))) (let ((v-7 (vector-ref sc2 2))) (let ((v-8 (vector-ref sc2 3))) (let ((v-9 (vector-ref sc2 4))) (v-9 0)))))))) (n--4177-2463-fixedsTmp v-0 v-1 v-3))))(else (vector 1 4294 (let ((sc1 (let ((v-5 (vector 1 v-4))) (vector 0 4294 (lambda (v-6) (lambda (v-7) (((Prelude-C-43_Num__Int) v-6) v-7))) (lambda (v-6) (lambda (v-7) (((Prelude-C-42_Num__Int) v-6) v-7))) (lambda (v-6) ((Prelude-fromInteger_Num__Int) v-6)))))) (case (get-tag sc1) ((0) (let ((v-5 (vector-ref sc1 1))) (let ((v-6 (vector-ref sc1 2))) (let ((v-7 (vector-ref sc1 3))) (let ((v-8 (vector-ref sc1 4))) (v-8 10)))))))) (n--4177-2463-fixedsTmp v-0 v-1 v-3)))))))))))
(define Main-case--3759-2415 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((sc1 v-5)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (let ((sc2 v-8)) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (vector 0 4294 4294 ((n--3759-2050-replace2D v-0 4294 v-4 v-8) v-0) ((n--3759-2050-replace2D v-0 4294 v-4 v-9) v-0))))))))))))))))))))))
(define Main-case--3764-2325 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (lambda (v-9) (n--3764-2213-replace v-0 4294 v-2 v-3 4294 v-7 (lambda (v-10) (n--3764-2213-replace v-0 4294 v-2 v-3 4294 v-8 (lambda (v-11) v-2) v-10)) v-9)))))))))))
(define Main-case--3930-2257 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9 v-10) (let ((sc0 v-10)) (case (get-tag sc0) ((0) (v-6 (Builtin-fst 4294 4294 v-9))) ((1) (Builtin-fst 4294 4294 v-9))))))
(define Main-case--3762-2131 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (n--3759-2048-minimumPossible v-0 (vector 1 4294 v-1 v-3))) ((1) (n--3759-2048-minimumPossible v-0 (vector 1 4294 v-2 v-3)))))))
(define Main-case--3721-2024 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (vector 1 4294 v-0)) ((1) (n--3720-2002-fixM v-1 v-2))))))
(define Main-case--3575-1852 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (vector 1 4294 v-1)) ((1) (n--3573-1832-fixM v-0 v-2 v-3))))))
(define Main-case--3496-1810 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (vector 1 4294 v-0)))(else (Prelude-traverse_Traversable__List 4294 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-map_Functor__Maybe 4294 4294 v-4 v-5)))))) (lambda (v-2) (lambda (v-3) ((Prelude-pure_Applicative__Maybe 4294) v-3))) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-4 v-5)))))) (lambda (v-2) (n--3496-1760-pruneCell v-0 v-2)) v-0))))))
(define Main-case--3499-1786 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (Main-makeCell v-3)) ((1) (vector 1 4294 v-2))))))
(define Main-case--3437-1731 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 1 4294 v-4 (n--3433-1705-fixedsTmp v-0 v-1 v-3)))) ((1) (let ((v-4 (vector-ref sc0 1))) (n--3433-1705-fixedsTmp v-0 v-1 v-3)))))))
(define Main-case--3412-1687 (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((v-1 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-1 (vector-ref sc0 1))) (let ((v-2 (vector-ref sc0 2))) (let ((v-3 (vector-ref sc0 3))) (let ((sc1 v-3)) (case (get-tag sc1) ((0) (let ((v-4 (vector-ref sc1 1))) (vector 1 4294 (vector 0 v-2))))(else (vector 1 4294 (vector 1 v-0)))))))))(else (vector 1 4294 (vector 1 v-0)))))))
(define Main-case--3050-1569 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6) (let ((sc0 v-6)) (case (get-tag sc0) ((0) (vector 1 4294 v-4 (n--3044-1314-filterKey v-0 4294 v-5))) ((1) (n--3044-1314-filterKey v-0 4294 v-5))))))
(define Main-case--3047-1449 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (let ((sc1 v-6)) (case (get-tag sc1) ((1) (let ((v-7 (vector-ref sc1 1))) (let ((sc2 (let ((v-8 (vector 0 4294 4294 v-5 (vector 1 v-7)))) (vector 0 4294 (lambda (v-9) (lambda (v-10) (lambda (v-11) (lambda (v-12) (lambda (v-13) (Prelude-foldr_Foldable__List 4294 4294 v-11 v-12 v-13)))))) (lambda (v-9) (lambda (v-10) (lambda (v-11) (lambda (v-12) (lambda (v-13) (Prelude-foldl_Foldable__List 4294 4294 v-11 v-12 v-13)))))))))) (case (get-tag sc2) ((0) (let ((v-8 (vector-ref sc2 1))) (let ((v-9 (vector-ref sc2 2))) (let ((v-10 (vector-ref sc2 3))) (((((v-10 4294) 4294) (lambda (v-11) (lambda (v-12) (n--3044-1310-insertWith v-0 4294 4294 (let ((v-13 (vector 0 4294 4294 v-5 (vector 1 v-7)))) (vector 0 4294 (lambda (v-14) (lambda (v-15) (Prelude-C-61C-61_Eq__Int v-14 v-15))) (lambda (v-14) (lambda (v-15) (Prelude-C-47C-61_Eq__Int v-14 v-15))))) (let ((v-13 (vector 0 4294 4294 v-5 (vector 1 v-7)))) (lambda (v-14) (lambda (v-15) (List-Prelude-C-43C-43 4294 v-14 v-15)))) v-12 (let ((v-13 (vector 0 4294 4294 v-5 (vector 1 v-7)))) (vector 1 4294 v-5 (vector 0 4294))) v-11)))) v-1) v-7))))))))))))))))))))
(define Main-case--3046-1364 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7 v-8 v-9 v-10 v-11) (let ((sc0 v-11)) (case (get-tag sc0) ((0) (vector 1 4294 (vector 0 4294 4294 v-6 ((v-10 v-5) v-7)) v-9)) ((1) (vector 1 4294 v-8 (n--3044-1310-insertWith v-0 4294 4294 v-3 v-10 v-4 v-5 v-9)))))))
(define Main-__Impl_Eq_Cell (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Main-C-61C-61_Eq__Cell v-0 v-1))) (lambda (v-0) (lambda (v-1) (Main-C-47C-61_Eq__Cell v-0 v-1))))))
(define Main-C-61C-61_Eq__Cell (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((0) (let ((v-3 (vector-ref sc1 1))) (Prelude-C-61C-61_Eq__Int v-2 v-3)))(else (vector 1 )))))) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((1) (let ((v-3 (vector-ref sc1 1))) (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (Prelude-C-61C-61_Eq__Int v-4 v-5))) (lambda (v-4) (lambda (v-5) (Prelude-C-47C-61_Eq__Int v-4 v-5)))) v-2 v-3)))(else (vector 1 ))))))(else (vector 1 ))))))
(define Main-C-47C-61_Eq__Cell (lambda (v-0 v-1) (Prelude-not (Main-C-61C-61_Eq__Cell v-0 v-1))))
(define Main-a-2615 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-b-2614 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-a-2608 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (vector 109 (vector 100 )))))))))
(define Main-ty-2588 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 109 (vector 100 )))))))
(define Main-ty-2574 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 109 (vector 100 )))))))
(define Main-a-2545 (lambda () (lambda (v-0) (vector 109 (vector 100 )))))
(define Main-_-2505 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 3 )))))))
(define Main-_-2504 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 3 ))))))
(define Main-sa-2456 (lambda () (lambda (v-0) (vector 107 ((Main-a-2451) v-0)))))
(define Main-sa-2455 (lambda () (lambda (v-0) (vector 111 (lambda (v-1) (vector 109 v-1))))))
(define Main-a-2451 (lambda () (lambda (v-0) (((Main-t-2447) v-0) (vector 100 )))))
(define Main-t-2447 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-1)))))
(define Main-b-2430 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (vector 109 (vector 100 )))))))))
(define Main-a-2429 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (vector 109 (vector 100 )))))))))
(define Main-sa-2406 (lambda () (lambda (v-0) (vector 105 (vector 3 )))))
(define Main-sa-2405 (lambda () (lambda (v-0) (vector 104 (vector 3 )))))
(define Main-sa-2402 (lambda () (lambda (v-0) (vector 116 (vector 104 (vector 3 )) (vector 105 (vector 3 ))))))
(define Main-sa-2401 (lambda () (lambda (v-0) (vector 110 (vector 3 )))))
(define Main-a-2390 (lambda () (lambda (v-0) (vector 116 ((Main-a-2365) v-0) (vector 100 )))))
(define Main-sa-2386 (lambda () (lambda (v-0) (vector 107 ((Main-a-2378) v-0)))))
(define Main-sa-2385 (lambda () (lambda (v-0) (vector 111 (lambda (v-1) (vector 109 v-1))))))
(define Main-t-2379 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-1)))))
(define Main-a-2378 (lambda () (lambda (v-0) (vector 109 ((Main-b-2364) v-0)))))
(define Main-a-2365 (lambda () (lambda (v-0) (vector 3 ))))
(define Main-b-2364 (lambda () (lambda (v-0) (vector 100 ))))
(define Main-b-2363 (lambda () (lambda (v-0) (vector 109 ((Main-b-2364) v-0)))))
(define Main-c-2362 (lambda () (lambda (v-0) (vector 109 (vector 116 ((Main-a-2365) v-0) ((Main-b-2364) v-0))))))
(define Main-b-2359 (lambda () (lambda (v-0) (vector 109 (vector 116 ((Main-a-2365) v-0) ((Main-b-2364) v-0))))))
(define Main-c-2358 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 100 ))))))
(define Main-a-2357 (lambda () (lambda (v-0) (((Main-t-2379) v-0) ((Main-a-2378) v-0)))))
(define Main-b-2355 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 100 ))))))
(define Main-c-2354 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 100 )))))
(define Main-a-2353 (lambda () (lambda (v-0) (((Main-t-2379) v-0) ((Main-a-2378) v-0)))))
(define Main-b-2351 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 100 )))))
(define Main-c-2350 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 116 (vector 100 ) (vector 100 ))))))
(define Main-a-2349 (lambda () (lambda (v-0) (((Main-t-2379) v-0) ((Main-a-2378) v-0)))))
(define Main-b-2340 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 109 v-1)))))))))
(define Main-sa-2253 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 105 (vector 3 ))))))))))))
(define Main-sa-2252 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 104 (vector 3 ))))))))))))
(define Main-sa-2249 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 116 (vector 104 (vector 3 )) (vector 105 (vector 3 )))))))))))))
(define Main-sa-2248 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 110 (vector 3 ))))))))))))
(define Main-a-2234 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (vector 116 v-4 (((((((((Main-b-2222) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7)))))))))))))
(define Main-b-2222 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 3 )))))))))))
(define Main-_-2221 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 109 (vector 116 v-4 (((((((((Main-b-2222) v-0) v-1) v-2) v-3) v-4) v-5) v-6) v-7)))))))))))))
(define Main-b-2200 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 116 (vector 100 ) (vector 100 )))))))
(define Main-b-2187 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 116 (vector 100 ) (vector 100 ))))))))
(define Main-b-2171 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 116 (vector 100 ) (vector 100 ))))))))
(define Main-a-2154 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 116 (vector 3 ) (vector 100 ))))))))
(define Main-a-2142 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 116 (vector 3 ) (vector 100 ))))))))
(define Main-a-2121 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 116 (vector 3 ) (vector 100 ))))))))
(define Main-a-2112 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 116 (vector 3 ) (vector 100 ))))))))
(define Main-sa-2078 (lambda () (lambda (v-0) (vector 105 (vector 3 )))))
(define Main-sa-2077 (lambda () (lambda (v-0) (vector 104 (vector 3 )))))
(define Main-sa-2074 (lambda () (lambda (v-0) (vector 116 (vector 104 (vector 3 )) (vector 105 (vector 3 ))))))
(define Main-sa-2073 (lambda () (lambda (v-0) (vector 110 (vector 3 )))))
(define Main-ty-2033 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 109 (vector 100 ))))))))
(define Main-sa-2019 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-ty-2015 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 109 (vector 100 ))))))))
(define Main-a-2008 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 109 (vector 100 )))))))
(define Main-b-2007 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 109 (vector 100 )))))))
(define Main-a-1991 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-b-1990 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-a-1987 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-b-1986 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-b-1980 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-c-1979 (lambda () (vector 108 (Main-Grid))))
(define Main-a-1978 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-f-1974 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Main-a-1973 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-b-1972 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-b-1971 (lambda () ((Main-f-1974) (Main-a-1973))))
(define Main-c-1970 (lambda () ((Main-f-1974) (Main-b-1972))))
(define Main-a-1969 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-a-1962 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 100 ))))))
(define Main-a-1959 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 100 ))))))
(define Main-b-1955 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 109 (vector 100 )))))))
(define Main-c-1954 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 109 (vector 100 )))))))
(define Main-a-1953 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (((Main-a-1959) v-0) v-1))))))
(define Main-a-1952 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 100 ))))))
(define Main-a-1949 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-b-1945 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 109 (vector 100 ))))))))
(define Main-c-1944 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-a-1943 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 ((((Main-a-1949) v-0) v-1) v-2)))))))
(define Main-a-1942 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-a-1940 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-a-1930 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 100 ))))))
(define Main-a-1925 (lambda () (lambda (v-0) (vector 109 (vector 100 )))))
(define Main-a-1914 (lambda () (vector 100 )))
(define Main-b-1910 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-c-1909 (lambda () (vector 108 (Main-Grid))))
(define Main-f-1904 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Main-a-1903 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-b-1902 (lambda () (vector 109 (vector 109 (vector 100 )))))
(define Main-b-1901 (lambda () ((Main-f-1904) (Main-a-1903))))
(define Main-c-1900 (lambda () ((Main-f-1904) (Main-b-1902))))
(define Main-a-1899 (lambda () (vector 109 (vector 109 (Main-a-1914)))))
(define Main-a-1888 (lambda () (vector 109 (vector 100 ))))
(define Main-b-1887 (lambda () (vector 109 (vector 100 ))))
(define Main-a-1877 (lambda () (lambda (v-0) (vector 109 (vector 100 )))))
(define Main-b-1876 (lambda () (lambda (v-0) (vector 109 (vector 100 )))))
(define Main-ty-1863 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (vector 100 ))))))))
(define Main-ty-1845 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (vector 100 ))))))))
(define Main-a-1838 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-b-1837 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 100 )))))))
(define Main-ty-1815 (lambda () (lambda (v-0) (vector 109 (vector 100 )))))
(define Main-a-1780 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 3 )))))))
(define Main-sa-1775 (lambda () (lambda (v-0) (lambda (v-1) (vector 107 (((Main-a-1770) v-0) v-1))))))
(define Main-sa-1774 (lambda () (lambda (v-0) (lambda (v-1) (vector 111 (lambda (v-2) (vector 109 v-2)))))))
(define Main-a-1770 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 3 ))))))
(define Main-_-1766 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 3 ))))))
(define Main-sa-1673 (lambda () (lambda (v-0) (vector 105 (vector 3 )))))
(define Main-sa-1672 (lambda () (lambda (v-0) (vector 104 (vector 3 )))))
(define Main-sa-1669 (lambda () (lambda (v-0) (vector 116 (vector 104 (vector 3 )) (vector 105 (vector 3 ))))))
(define Main-sa-1668 (lambda () (lambda (v-0) (vector 110 (vector 3 )))))
(define Main-a-1645 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 100 )))))
(define Main-b-1641 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 100 ))))))
(define Main-c-1640 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 109 (vector 3 )))))))
(define Main-b-1637 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 109 (vector 3 )))))))
(define Main-c-1636 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 109 (vector 3 )))))))
(define Main-a-1635 (lambda () (lambda (v-0) (vector 109 ((Main-a-1645) v-0)))))
(define Main-a-1634 (lambda () (lambda (v-0) (vector 116 (vector 109 (vector 3 )) (vector 109 (vector 3 ))))))
(define Main-b-1631 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 109 (vector 3 )))))))
(define Main-c-1630 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 109 (vector 3 )) (vector 109 (vector 3 )))))))
(define Main-a-1629 (lambda () (lambda (v-0) (vector 109 ((Main-a-1645) v-0)))))
(define Main-a-1627 (lambda () (lambda (v-0) (vector 3 ))))
(define Main-b-1626 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 109 ((Main-a-1627) v-0)) (vector 109 ((Main-a-1627) v-0)))))))
(define Main-c-1625 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 109 ((Main-a-1627) v-0)) (vector 109 ((Main-a-1627) v-0)))))))
(define Main-a-1624 (lambda () (lambda (v-0) (vector 109 ((Main-a-1645) v-0)))))
(define Main-a-1622 (lambda () (lambda (v-0) (vector 3 ))))
(define Main-b-1621 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 109 ((Main-a-1622) v-0)) (vector 109 ((Main-a-1622) v-0)))))))
(define Main-c-1620 (lambda () (lambda (v-0) (vector 109 (vector 109 ((Main-a-1622) v-0))))))
(define Main-a-1619 (lambda () (lambda (v-0) (vector 109 ((Main-a-1645) v-0)))))
(define Main-a-1615 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-1))))))))
(define Main-a-1605 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-1)))))
(define Main-a-1583 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 116 (vector 109 v-1) (vector 109 v-1))))))))))
(define Main-a-1551 (lambda () (lambda (v-0) (lambda (v-1) (vector 116 (vector 109 v-1) (vector 109 v-1))))))
(define Main-k-1532 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 (vector 3 )))))))))
(define Main-a-1531 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 (vector 3 )))))))))
(define Main-b-1516 (lambda () (lambda (v-0) (vector 109 (vector 3 )))))
(define Main-b-1506 (lambda () (lambda (v-0) (vector 109 (vector 3 )))))
(define Main-a-1489 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 109 (vector 3 ))))))
(define Main-a-1487 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 109 (vector 3 ))))))
(define Main-a-1464 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 109 (vector 3 ))))))))))
(define Main-acc-1459 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (vector 116 (vector 3 ) (vector 109 (vector 3 ))))))))))
(define Main-acc-1437 (lambda () (lambda (v-0) (vector 109 (vector 116 (vector 3 ) (vector 109 (vector 3 )))))))
(define Main-elem-1436 (lambda () (lambda (v-0) (vector 116 (vector 3 ) (vector 100 )))))
(define Main-a-1427 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (vector 116 v-2 v-1))))))))))))))
(define Main-a-1393 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (lambda (v-10) (vector 116 v-2 v-1))))))))))))))
(define Main-a-1337 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 116 v-2 v-1))))))))))
(define Main-a-1334 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 116 v-2 v-1))))))))))
(define Main-f-1296 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Main-b-1292 (lambda () (vector 109 (vector 5 ))))
(define Main-a-1290 (lambda () ((Main-f-1296) (vector 100 ))))
(define Main-f-1288 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Main-a-1287 (lambda () (vector 109 (vector 100 ))))
(define Main-b-1284 (lambda () (vector 109 (vector 5 ))))
(define Main-a-1282 (lambda () ((Main-f-1288) (Main-a-1287))))
(define Main-b-1265 (lambda () (lambda (v-0) (vector 109 (vector 6 )))))
(define Main-t-1258 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-1)))))
(define Main-a-1250 (lambda () (lambda (v-0) (((Main-t-1258) v-0) (vector 6 )))))
(define Main-b-1249 (lambda () (lambda (v-0) (((Main-t-1258) v-0) (vector 100 )))))
(define Main-a-1244 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 (vector 6 )))))))
(define Main-a-1238 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (vector 109 v-3)))))))))
(define Main-a-1235 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-3))))))))
(define Main-b-1206 (lambda () (lambda (v-0) (lambda (v-1) (vector 100 )))))
(define Main-c-1205 (lambda () (lambda (v-0) (lambda (v-1) (vector 108 (((Main-b-1206) v-0) v-1))))))
(define Main-sa-1195 (lambda () (lambda (v-0) (vector 105 (vector 3 )))))
(define Main-sa-1194 (lambda () (lambda (v-0) (vector 104 (vector 3 )))))
(define Main-sa-1191 (lambda () (lambda (v-0) (vector 116 (vector 104 (vector 3 )) (vector 105 (vector 3 ))))))
(define Main-sa-1190 (lambda () (lambda (v-0) (vector 110 (vector 3 )))))
(define Main-ty-1176 (lambda () (lambda (v-0) (vector 109 (vector 109 (vector 100 ))))))
(define Main-ty-665 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 3 ))))))
(define Main-subGridsToRowsHelper (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (vector 0 4294)))(else (List-Prelude-C-43C-43 4294 (n--3648-1926-toRowHelper v-1 v-0 (List-Data-transpose 4294 (List-Data-take 4294 v-0 v-1))) (Main-subGridsToRowsHelper v-0 (List-Data-drop 4294 v-0 v-1))))))))
(define Main-subGridsToRows (lambda () (lambda (v-0) (Main-subGridsToRowsHelper (Prelude-fromInteger_Num__Nat 3) v-0))))
(define Main-solve (lambda (v-0) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 ((Main-pruneGrid) v-0) (lambda (v-1) (n--4280-2564-solveC-39 v-0 v-1)))))
(define Main-showGrid (lambda () (lambda (v-0) ((Strings-Data-unlines) (Prelude-map_Functor__List 4294 4294 (lambda (v-1) ((Strings-Data-unwords) (Prelude-map_Functor__List 4294 4294 (lambda (v-2) (n--3015-1274-showCell v-2)) v-1))) v-0)))))
(define Main-readGrid (lambda (v-0) (Main-with--2903-1167 v-0 (Prelude-C-61C-61_Eq__Nat (Prelude-length v-0) (Prelude-fromInteger_Num__Nat 81)))))
(define Main-pruneSubGrids (lambda () (lambda (v-0) (Prelude-map_Functor__Maybe 4294 4294 (Main-subGridsToRows) ((Main-pruneRows) ((Main-subGridsToRows) v-0))))))
(define Main-pruneRows (lambda () (lambda (v-0) (Prelude-traverse_Traversable__List 4294 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-map_Functor__Maybe 4294 4294 v-3 v-4)))))) (lambda (v-1) (lambda (v-2) ((Prelude-pure_Applicative__Maybe 4294) v-2))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-3 v-4)))))) (lambda (v-1) (Main-pruneCells v-1)) v-0))))
(define Main-pruneGridC-39 (lambda (v-0) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 ((Main-pruneRows) v-0) (Main-pruneCols)) (Main-pruneSubGrids))))
(define Main-pruneGrid (lambda () (lambda (v-0) (n--3720-2002-fixM (lambda (v-1) (Main-pruneGridC-39 v-1)) v-0))))
(define Main-pruneCols (lambda () (lambda (v-0) (Prelude-map_Functor__Maybe 4294 4294 (lambda (v-1) (List-Data-transpose 4294 v-1)) ((Main-pruneRows) (List-Data-transpose 4294 v-0))))))
(define Main-pruneCellsByFixed (lambda (v-0) (Prelude-traverse_Traversable__List 4294 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-map_Functor__Maybe 4294 4294 v-3 v-4)))))) (lambda (v-1) (lambda (v-2) ((Prelude-pure_Applicative__Maybe 4294) v-2))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-3 v-4)))))) (lambda (v-1) (n--3431-1701-pruneCell v-0 v-1)) v-0)))
(define Main-pruneCellsByExclusives (lambda (v-0) (Main-case--3496-1810 v-0 (n--3496-1759-exclusives v-0))))
(define Main-pruneCells (lambda (v-0) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 (n--3573-1832-fixM v-0 (lambda (v-1) (Main-pruneCellsByFixed v-1)) v-0) (lambda (v-1) (n--3573-1832-fixM v-0 (lambda (v-2) (Main-pruneCellsByExclusives v-2)) v-1)))))
(define Main-nextGrids (lambda (v-0) (Main-case--3759-2415 v-0 (n--3759-2049-fixCell v-0 (n--3759-2048-minimumPossible v-0 (List-Data-filter 4294 (lambda (v-1) (n--3759-2047-isPossible v-0 (Builtin-snd 4294 4294 v-1))) (((List-Data-zip 4294 4294) (Prelude-take 4294 (Prelude-fromInteger_Num__Nat 100) (Prelude-rangeFrom_Range__C-36a 4294 (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-43_Num__Int) v-1) v-2))) (lambda (v-1) (lambda (v-2) (((Prelude-C-42_Num__Int) v-1) v-2))) (lambda (v-1) ((Prelude-fromInteger_Num__Int) v-1))) (lambda (v-1) (lambda (v-2) (Prelude-div_Integral__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-mod_Integral__Int v-1 v-2)))) (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (Prelude-C-61C-61_Eq__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-47C-61_Eq__Int v-1 v-2)))) (lambda (v-1) (lambda (v-2) (Prelude-compare_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-60_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-62_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-60C-61_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-62C-61_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-max_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-min_Ord__Int v-1 v-2)))) (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-43_Num__Int) v-1) v-2))) (lambda (v-1) (lambda (v-2) (((Prelude-C-42_Num__Int) v-1) v-2))) (lambda (v-1) ((Prelude-fromInteger_Num__Int) v-1))) (lambda (v-1) (Prelude-negate_Neg__Int v-1)) (lambda (v-1) (lambda (v-2) (((Prelude-C-45_Neg__Int) v-1) v-2)))))) ((Prelude-fromInteger_Num__Int) 0)))) ((Prelude-concat 4294 4294 (vector 0 4294 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldr_Foldable__List 4294 4294 v-3 v-4 v-5)))))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldl_Foldable__List 4294 4294 v-3 v-4 v-5))))))) (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 4294) v-1) v-2)))) (Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 4294)))) v-0))))))))
(define Main-makeCell (lambda (v-0) (Main-case--3412-1687 v-0)))
(define Main-main (lambda () (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (PrimIO-putStrLn "Please input the soduku:") (lambda (v-0) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 (PrimIO-getLine) (lambda (v-1) (Main-case--4344-2640 v-0 v-1 (Main-readGrid v-1))))))))
(define Main-isPossible (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((1) (let ((v-1 (vector-ref sc0 1))) (vector 0 )))(else (vector 1 ))))))
(define Main-isGridInvalid (lambda (v-0) (Prelude-C-124C-124 ((Prelude-any 4294 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldr_Foldable__List 4294 4294 v-3 v-4 v-5)))))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldl_Foldable__List 4294 4294 v-3 v-4 v-5))))))) (lambda (v-1) (n--4175-2461-isRowInvalid v-0 v-1))) v-0) (lambda () (Prelude-C-124C-124 ((Prelude-any 4294 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldr_Foldable__List 4294 4294 v-3 v-4 v-5)))))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldl_Foldable__List 4294 4294 v-3 v-4 v-5))))))) (lambda (v-1) (n--4175-2461-isRowInvalid v-0 v-1))) (List-Data-transpose 4294 v-0)) (lambda () ((Prelude-any 4294 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldr_Foldable__List 4294 4294 v-3 v-4 v-5)))))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldl_Foldable__List 4294 4294 v-3 v-4 v-5))))))) (lambda (v-1) (n--4175-2461-isRowInvalid v-0 v-1))) ((Main-subGridsToRows) v-0))))))))
(define Main-isGridFilled (lambda (v-0) ((Prelude-all 4294 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldr_Foldable__List 4294 4294 v-3 v-4 v-5)))))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldl_Foldable__List 4294 4294 v-3 v-4 v-5))))))) (lambda (v-1) (n--4153-2438-isCellFilled v-0 v-1))) ((Prelude-concat 4294 4294 (vector 0 4294 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldr_Foldable__List 4294 4294 v-3 v-4 v-5)))))) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-foldl_Foldable__List 4294 4294 v-3 v-4 v-5))))))) (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 4294) v-1) v-2)))) (Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 4294)))) v-0))))
(define Main-exclusivePossibilities (lambda (v-0) (n--3044-1315-elem v-0 4294 (n--3044-1314-filterKey v-0 4294 (n--3044-1313-flipTableKey v-0 (vector 0 4294) ((n--3044-1312-filterLength v-0) ((n--3044-1311-flipPossibleTable v-0) (List-Data-filter 4294 (lambda (v-1) (Main-isPossible (Builtin-snd 4294 4294 v-1))) (((List-Data-zip 4294 4294) (Prelude-rangeFromTo_Range__C-36a 4294 (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-43_Num__Int) v-1) v-2))) (lambda (v-1) (lambda (v-2) (((Prelude-C-42_Num__Int) v-1) v-2))) (lambda (v-1) ((Prelude-fromInteger_Num__Int) v-1))) (lambda (v-1) (lambda (v-2) (Prelude-div_Integral__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-mod_Integral__Int v-1 v-2)))) (vector 0 4294 4294 (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (Prelude-C-61C-61_Eq__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-47C-61_Eq__Int v-1 v-2)))) (lambda (v-1) (lambda (v-2) (Prelude-compare_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-60_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-62_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-60C-61_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-C-62C-61_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-max_Ord__Int v-1 v-2))) (lambda (v-1) (lambda (v-2) (Prelude-min_Ord__Int v-1 v-2)))) (vector 0 4294 (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-43_Num__Int) v-1) v-2))) (lambda (v-1) (lambda (v-2) (((Prelude-C-42_Num__Int) v-1) v-2))) (lambda (v-1) ((Prelude-fromInteger_Num__Int) v-1))) (lambda (v-1) (Prelude-negate_Neg__Int v-1)) (lambda (v-1) (lambda (v-2) (((Prelude-C-45_Neg__Int) v-1) v-2)))))) ((Prelude-fromInteger_Num__Int) 1) ((Prelude-fromInteger_Num__Int) 9))) v-0)))))))))
(define Main-Grid (lambda () (vector 109 (vector 109 (vector 100 )))))
(define n--5074-5749-unpackC-39 (lambda (v-0 v-1 v-2 v-3) (Prelude-case--5076-5759 v-0 v-3 v-2 v-1 (Prelude-C-62C-61_Ord__Int v-1 v-2))))
(define Prelude-case--6751-7812 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (Prelude-countFrom 4294 v-2 (lambda (v-5) (let ((sc1 (let ((sc2 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc2) ((0) (let ((v-6 (vector-ref sc2 1))) (let ((v-7 (vector-ref sc2 2))) (let ((v-8 (vector-ref sc2 3))) (let ((v-9 (vector-ref sc2 4))) v-7))))))))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) ((v-7 v-5) (let ((sc2 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (let ((v-11 (vector-ref sc2 2))) (let ((v-12 (vector-ref sc2 3))) (let ((v-13 (vector-ref sc2 4))) ((v-13 v-3) v-2))))))))))))))))))) ((1) (Prelude-countFrom 4294 v-2 (lambda (v-5) (let ((sc1 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) ((v-9 v-5) (let ((sc2 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (let ((v-11 (vector-ref sc2 2))) (let ((v-12 (vector-ref sc2 3))) (let ((v-13 (vector-ref sc2 4))) ((v-13 v-2) v-3)))))))))))))))))))))))
(define Prelude-case--6957-7749 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (vector 1 4294 v-2 (vector 0 4294))) ((1) (vector 0 4294))))))
(define Prelude-case--6898-7690 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (Prelude-takeBefore 4294 (lambda (v-6) (let ((sc1 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (let ((v-10 (vector-ref sc1 4))) (let ((v-11 (vector-ref sc1 5))) (let ((v-12 (vector-ref sc1 6))) (let ((v-13 (vector-ref sc1 7))) (let ((v-14 (vector-ref sc1 8))) (let ((v-15 (vector-ref sc1 9))) ((v-10 v-6) v-2)))))))))))))) (Prelude-countFrom 4294 v-4 (lambda (v-6) (let ((sc1 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (let ((v-10 (vector-ref sc1 4))) ((v-10 v-6) (let ((sc2 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-11 (vector-ref sc2 1))) (let ((v-12 (vector-ref sc2 2))) (let ((v-13 (vector-ref sc2 3))) (let ((v-14 (vector-ref sc2 4))) ((v-14 v-4) v-3)))))))))))))))))))) ((1) (Prelude-case--6957-7749 4294 v-1 v-4 v-3 v-2 (Prelude-C-38C-38 (let ((sc1 (let ((sc2 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-6 (vector-ref sc2 1))) (let ((v-7 (vector-ref sc2 2))) (let ((v-8 (vector-ref sc2 3))) (let ((v-9 (vector-ref sc2 4))) (let ((v-10 (vector-ref sc2 5))) (let ((v-11 (vector-ref sc2 6))) (let ((v-12 (vector-ref sc2 7))) (let ((v-13 (vector-ref sc2 8))) (let ((v-14 (vector-ref sc2 9))) v-7)))))))))))))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) ((v-7 v-4) v-3))))))) (lambda () (let ((sc1 (let ((sc2 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-6 (vector-ref sc2 1))) (let ((v-7 (vector-ref sc2 2))) (let ((v-8 (vector-ref sc2 3))) (let ((v-9 (vector-ref sc2 4))) (let ((v-10 (vector-ref sc2 5))) (let ((v-11 (vector-ref sc2 6))) (let ((v-12 (vector-ref sc2 7))) (let ((v-13 (vector-ref sc2 8))) (let ((v-14 (vector-ref sc2 9))) v-7)))))))))))))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) ((v-7 v-3) v-2)))))))))))))))
(define Prelude-case--6749-7633 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (Prelude-takeBefore 4294 (lambda (v-6) (let ((sc1 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (let ((v-10 (vector-ref sc1 4))) (let ((v-11 (vector-ref sc1 5))) (let ((v-12 (vector-ref sc1 6))) (let ((v-13 (vector-ref sc1 7))) (let ((v-14 (vector-ref sc1 8))) (let ((v-15 (vector-ref sc1 9))) ((v-11 v-6) v-4)))))))))))))) (Prelude-countFrom 4294 v-2 (lambda (v-6) (let ((sc1 (let ((sc2 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc2) ((0) (let ((v-7 (vector-ref sc2 1))) (let ((v-8 (vector-ref sc2 2))) (let ((v-9 (vector-ref sc2 3))) (let ((v-10 (vector-ref sc2 4))) v-8))))))))) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (let ((v-10 (vector-ref sc1 4))) ((v-8 v-6) (let ((sc2 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-11 (vector-ref sc2 1))) (let ((v-12 (vector-ref sc2 2))) (let ((v-13 (vector-ref sc2 3))) (let ((v-14 (vector-ref sc2 4))) ((v-14 v-3) v-2)))))))))))))))))))) ((1) (Prelude-case--6898-7690 4294 v-1 v-4 v-3 v-2 (let ((sc1 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (let ((v-10 (vector-ref sc1 5))) (let ((v-11 (vector-ref sc1 6))) (let ((v-12 (vector-ref sc1 7))) (let ((v-13 (vector-ref sc1 8))) (let ((v-14 (vector-ref sc1 9))) ((v-9 (let ((sc2 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-15 (vector-ref sc2 1))) (let ((v-16 (vector-ref sc2 2))) (let ((v-17 (vector-ref sc2 3))) (let ((v-18 (vector-ref sc2 4))) ((v-18 v-4) v-2))))))))) (let ((sc2 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc2) ((0) (let ((v-15 (vector-ref sc2 1))) (let ((v-16 (vector-ref sc2 2))) (let ((v-17 (vector-ref sc2 3))) (let ((v-18 (vector-ref sc2 4))) ((v-18 v-4) v-3)))))))))))))))))))))))))))
(define Prelude-case--6781-7571 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (Prelude-takeUntil 4294 (lambda (v-5) (let ((sc1 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (let ((v-10 (vector-ref sc1 5))) (let ((v-11 (vector-ref sc1 6))) (let ((v-12 (vector-ref sc1 7))) (let ((v-13 (vector-ref sc1 8))) (let ((v-14 (vector-ref sc1 9))) ((v-11 v-5) v-2)))))))))))))) (Prelude-countFrom 4294 v-3 (lambda (v-5) (let ((sc1 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) ((v-9 v-5) (let ((sc2 (let ((sc3 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc3) ((0) (let ((v-10 (vector-ref sc3 1))) (let ((v-11 (vector-ref sc3 2))) (let ((v-12 (vector-ref sc3 3))) (let ((v-13 (vector-ref sc3 4))) v-11))))))))) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (let ((v-11 (vector-ref sc2 2))) (let ((v-12 (vector-ref sc2 3))) (let ((v-13 (vector-ref sc2 4))) (v-13 1)))))))))))))))))))) ((1) (vector 1 4294 v-3 (vector 0 4294)))))))
(define Prelude-case--6748-7522 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (Prelude-takeUntil 4294 (lambda (v-5) (let ((sc1 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) (let ((v-10 (vector-ref sc1 5))) (let ((v-11 (vector-ref sc1 6))) (let ((v-12 (vector-ref sc1 7))) (let ((v-13 (vector-ref sc1 8))) (let ((v-14 (vector-ref sc1 9))) ((v-12 v-5) v-3)))))))))))))) (Prelude-countFrom 4294 v-2 (lambda (v-5) (let ((sc1 (let ((sc2 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc2) ((0) (let ((v-6 (vector-ref sc2 1))) (let ((v-7 (vector-ref sc2 2))) (let ((v-8 (vector-ref sc2 3))) (let ((v-9 (vector-ref sc2 4))) v-7))))))))) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (let ((v-8 (vector-ref sc1 3))) (let ((v-9 (vector-ref sc1 4))) ((v-7 v-5) (let ((sc2 (let ((sc3 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc3) ((0) (let ((v-10 (vector-ref sc3 1))) (let ((v-11 (vector-ref sc3 2))) (let ((v-12 (vector-ref sc3 3))) (let ((v-13 (vector-ref sc3 4))) v-11))))))))) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (let ((v-11 (vector-ref sc2 2))) (let ((v-12 (vector-ref sc2 3))) (let ((v-13 (vector-ref sc2 4))) (v-13 1)))))))))))))))))))) ((1) (Prelude-case--6781-7571 4294 v-1 v-3 v-2 (let ((sc1 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-5 (vector-ref sc1 1))) (let ((v-6 (vector-ref sc1 2))) (let ((v-7 (vector-ref sc1 3))) (let ((v-8 (vector-ref sc1 4))) (let ((v-9 (vector-ref sc1 5))) (let ((v-10 (vector-ref sc1 6))) (let ((v-11 (vector-ref sc1 7))) (let ((v-12 (vector-ref sc1 8))) (let ((v-13 (vector-ref sc1 9))) ((v-9 v-2) v-3)))))))))))))))))))
(define Prelude-case--6425-7148 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (vector 0 4294)) ((1) (vector 1 4294 v-1 (Prelude-takeBefore 4294 v-3 (v-2))))))))
(define Prelude-case--6382-7106 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (vector 1 4294 v-1 (vector 0 4294))) ((1) (vector 1 4294 v-1 (Prelude-takeUntil 4294 v-3 (v-2))))))))
(define Prelude-case--5379-6088 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--5380-6074 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--5076-5759 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (vector 0 4294)) ((1) (vector 1 4294 (string-ref v-1 v-3) (n--5074-5749-unpackC-39 v-0 (((Prelude-C-43_Num__Int) v-3) ((Prelude-fromInteger_Num__Int) 1)) v-2 v-1)))))))
(define Prelude-case--4907-5611 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Prelude-elem 4294 v-1 v-2 v-4))))))
(define Prelude-case--3251-3703 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--3252-3689 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--3176-3576 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) 0) ((1) (+ 1 (- v-0 ((Prelude-fromInteger_Num__Integer) 1))))))))
(define Prelude-case--2682-2959 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((sc1 (let ((v-3 (vector 0 ))) (let ((sc2 v-1)) (case (get-tag sc2) ((0) (let ((v-4 (vector-ref sc2 1))) (let ((v-5 (vector-ref sc2 2))) (let ((v-6 (vector-ref sc2 3))) (let ((v-7 (vector-ref sc2 4))) v-5)))))))))) (case (get-tag sc1) ((0) (let ((v-3 (vector-ref sc1 1))) (let ((v-4 (vector-ref sc1 2))) (let ((v-5 (vector-ref sc1 3))) (let ((v-6 (vector-ref sc1 4))) ((v-5 4294) (let ((v-7 (vector 0 ))) (vector 0 ))))))))))) ((1) (let ((sc1 (let ((v-3 (vector 1 ))) v-1))) (case (get-tag sc1) ((0) (let ((v-3 (vector-ref sc1 1))) (let ((v-4 (vector-ref sc1 2))) (let ((v-5 (vector-ref sc1 3))) (let ((v-6 (vector-ref sc1 4))) (v-5 4294)))))))))))))
(define Prelude-case--2237-2495 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (remainder v-1 v-0))))))
(define Prelude-case--2236-2481 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (b/ v-1 v-0 63))))))
(define Prelude-case--1532-1757 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 2 ))))))
(define Prelude-case--1467-1740 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Prelude-case--1532-1757 v-0 v-1 (Prelude-C-61C-61_Eq__Char v-1 v-0)))))))
(define Prelude-case--1472-1723 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1473-1709 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1217-1436 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 2 ))))))
(define Prelude-case--1152-1419 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Prelude-case--1217-1436 v-0 v-1 (Prelude-C-61C-61_Eq__Integer v-1 v-0)))))))
(define Prelude-case--1157-1402 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1158-1388 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1112-1329 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 2 ))))))
(define Prelude-case--1047-1312 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (Prelude-case--1112-1329 v-0 v-1 (Prelude-C-61C-61_Eq__Int v-1 v-0)))))))
(define Prelude-case--1052-1295 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-case--1053-1281 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) v-1) ((1) v-0)))))
(define Prelude-traverse_Traversable__List (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (let ((sc1 v-3)) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (let ((v-10 (vector-ref sc1 4))) ((v-9 4294) (vector 0 4294))))))))))) ((1) (let ((v-6 (vector-ref sc0 1))) (let ((v-7 (vector-ref sc0 2))) (let ((v-8 (vector-ref sc0 3))) (let ((sc1 v-3)) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) (let ((v-12 (vector-ref sc1 4))) ((((v-12 4294) 4294) (let ((sc2 v-3)) (case (get-tag sc2) ((0) (let ((v-13 (vector-ref sc2 1))) (let ((v-14 (vector-ref sc2 2))) (let ((v-15 (vector-ref sc2 3))) (let ((v-16 (vector-ref sc2 4))) ((((v-16 4294) 4294) (let ((sc3 v-3)) (case (get-tag sc3) ((0) (let ((v-17 (vector-ref sc3 1))) (let ((v-18 (vector-ref sc3 2))) (let ((v-19 (vector-ref sc3 3))) (let ((v-20 (vector-ref sc3 4))) ((v-19 4294) (lambda (v-21) (lambda (v-22) (vector 1 4294 v-21 v-22)))))))))))) (v-4 v-7)))))))))) (Prelude-traverse_Traversable__List 4294 4294 4294 v-3 v-4 v-8)))))))))))))))))
(define Prelude-show_Show__Int (lambda (v-0) (((Prelude-showPrec_Show__Int) (vector 0 )) v-0)))
(define Prelude-showPrec_Show__Int (lambda () (lambda (v-0) (lambda (v-1) (Prelude-primNumShow 4294 (lambda (v-2) (number->string v-2)) v-0 v-1)))))
(define Prelude-rangeFrom_Range__C-36a (lambda (v-0 v-1 v-2) (Prelude-countFrom 4294 v-2 (lambda (v-3) (let ((sc0 (let ((sc1 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc1) ((0) (let ((v-4 (vector-ref sc1 1))) (let ((v-5 (vector-ref sc1 2))) (let ((v-6 (vector-ref sc1 3))) (let ((v-7 (vector-ref sc1 4))) v-5))))))))) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) ((v-5 (let ((sc1 (let ((sc2 (Builtin-fst 4294 4294 v-1))) (case (get-tag sc2) ((0) (let ((v-8 (vector-ref sc2 1))) (let ((v-9 (vector-ref sc2 2))) (let ((v-10 (vector-ref sc2 3))) (let ((v-11 (vector-ref sc2 4))) v-9))))))))) (case (get-tag sc1) ((0) (let ((v-8 (vector-ref sc1 1))) (let ((v-9 (vector-ref sc1 2))) (let ((v-10 (vector-ref sc1 3))) (let ((v-11 (vector-ref sc1 4))) (v-11 1))))))))) v-3))))))))))))
(define Prelude-rangeFromTo_Range__C-36a (lambda (v-0 v-1 v-2 v-3) (Prelude-case--6748-7522 4294 v-1 v-2 v-3 (let ((sc0 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) (let ((v-8 (vector-ref sc0 5))) (let ((v-9 (vector-ref sc0 6))) (let ((v-10 (vector-ref sc0 7))) (let ((v-11 (vector-ref sc0 8))) (let ((v-12 (vector-ref sc0 9))) ((v-8 v-3) v-2))))))))))))))))
(define Prelude-rangeFromThen_Range__C-36a (lambda (v-0 v-1 v-2 v-3) (Prelude-case--6751-7812 4294 v-1 v-2 v-3 (let ((sc0 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) (let ((v-8 (vector-ref sc0 5))) (let ((v-9 (vector-ref sc0 6))) (let ((v-10 (vector-ref sc0 7))) (let ((v-11 (vector-ref sc0 8))) (let ((v-12 (vector-ref sc0 9))) ((v-8 v-3) v-2))))))))))))))))
(define Prelude-rangeFromThenTo_Range__C-36a (lambda (v-0 v-1 v-2 v-3 v-4) (Prelude-case--6749-7633 4294 v-1 v-2 v-3 v-4 (let ((sc0 (Builtin-fst 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((v-8 (vector-ref sc0 4))) (let ((v-9 (vector-ref sc0 5))) (let ((v-10 (vector-ref sc0 6))) (let ((v-11 (vector-ref sc0 7))) (let ((v-12 (vector-ref sc0 8))) (let ((v-13 (vector-ref sc0 9))) ((v-9 (let ((sc1 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-14 (vector-ref sc1 1))) (let ((v-15 (vector-ref sc1 2))) (let ((v-16 (vector-ref sc1 3))) (let ((v-17 (vector-ref sc1 4))) ((v-17 v-4) v-2))))))))) (let ((sc1 (Builtin-snd 4294 4294 (Builtin-snd 4294 4294 v-1)))) (case (get-tag sc1) ((0) (let ((v-14 (vector-ref sc1 1))) (let ((v-15 (vector-ref sc1 2))) (let ((v-16 (vector-ref sc1 3))) (let ((v-17 (vector-ref sc1 4))) ((v-17 v-4) v-3))))))))))))))))))))))))
(define Prelude-pure_Applicative__Maybe (lambda (v-0) (lambda (v-1) (vector 1 4294 v-1))))
(define Prelude-pure_Applicative__List (lambda (v-0 v-1) (vector 1 4294 v-1 (vector 0 4294))))
(define Prelude-pure_Applicative__IO (lambda (v-0 v-1) (PrimIO-io_pure 4294 v-1)))
(define Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 (lambda (v-0) (vector 0 4294)))
(define Prelude-negate_Neg__Int (lambda (v-0) (b- ((Prelude-fromInteger_Num__Int) 0) v-0 63)))
(define Prelude-mod_Integral__Int (lambda (v-0 v-1) (Prelude-case--2237-2495 v-1 v-0 (Prelude-C-61C-61_Eq__Int v-1 ((Prelude-fromInteger_Num__Int) 0)))))
(define Prelude-min_Ord__Prec (lambda (v-0 v-1) (Prelude-case--5380-6074 v-1 v-0 (Prelude-C-60_Ord__Prec v-0 v-1))))
(define Prelude-min_Ord__Nat (lambda (v-0 v-1) (Prelude-case--3252-3689 v-1 v-0 (Prelude-C-60_Ord__Nat v-0 v-1))))
(define Prelude-min_Ord__Integer (lambda (v-0 v-1) (Prelude-case--1158-1388 v-1 v-0 (Prelude-C-60_Ord__Integer v-0 v-1))))
(define Prelude-min_Ord__Int (lambda (v-0 v-1) (Prelude-case--1053-1281 v-1 v-0 (Prelude-C-60_Ord__Int v-0 v-1))))
(define Prelude-min_Ord__Char (lambda (v-0 v-1) (Prelude-case--1473-1709 v-1 v-0 (Prelude-C-60_Ord__Char v-0 v-1))))
(define Prelude-max_Ord__Prec (lambda (v-0 v-1) (Prelude-case--5379-6088 v-1 v-0 (Prelude-C-62_Ord__Prec v-0 v-1))))
(define Prelude-max_Ord__Nat (lambda (v-0 v-1) (Prelude-case--3251-3703 v-1 v-0 (Prelude-C-62_Ord__Nat v-0 v-1))))
(define Prelude-max_Ord__Integer (lambda (v-0 v-1) (Prelude-case--1157-1402 v-1 v-0 (Prelude-C-62_Ord__Integer v-0 v-1))))
(define Prelude-max_Ord__Int (lambda (v-0 v-1) (Prelude-case--1052-1295 v-1 v-0 (Prelude-C-62_Ord__Int v-0 v-1))))
(define Prelude-max_Ord__Char (lambda (v-0 v-1) (Prelude-case--1472-1723 v-1 v-0 (Prelude-C-62_Ord__Char v-0 v-1))))
(define Prelude-map_Functor__Maybe (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (vector 1 4294 (v-2 v-5))))) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294)))))))
(define Prelude-map_Functor__List (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (vector 1 4294 (v-2 v-5) (Prelude-map_Functor__List 4294 4294 v-2 v-6))))))))))
(define Prelude-map_Functor__IO (lambda (v-0 v-1 v-2 v-3) ((PrimIO-io_bind 4294 4294 v-3) (lambda (v-4) (PrimIO-io_pure 4294 (v-2 v-4))))))
(define Prelude-join_Monad__Maybe (lambda (v-0 v-1) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 v-1 (lambda (v-2) v-2))))
(define Prelude-join_Monad__List (lambda (v-0 v-1) (Prelude-C-62C-62C-61_Monad__List 4294 4294 v-1 (lambda (v-2) v-2))))
(define Prelude-join_Monad__IO (lambda (v-0 v-1) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 v-1 (lambda (v-2) v-2))))
(define Prelude-fromInteger_Num__Nat (lambda (v-0) v-0))
(define Prelude-fromInteger_Num__Integer (lambda () (lambda (v-0) v-0)))
(define Prelude-fromInteger_Num__Int (lambda () (lambda (v-0) v-0)))
(define Prelude-foldr_Foldable__List (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) v-3)) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) ((v-2 v-6) (Prelude-foldr_Foldable__List 4294 4294 v-2 v-3 v-7))))))))))
(define Prelude-foldl_Foldable__List (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) v-3)) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (Prelude-foldl_Foldable__List 4294 4294 v-2 ((v-2 v-3) v-6) v-7)))))))))
(define Prelude-empty_Alternative__Maybe (lambda (v-0) (vector 0 4294)))
(define Prelude-empty_Alternative__List (lambda (v-0) (vector 0 4294)))
(define Prelude-div_Integral__Int (lambda (v-0 v-1) (Prelude-case--2236-2481 v-1 v-0 (Prelude-C-61C-61_Eq__Int v-1 ((Prelude-fromInteger_Num__Int) 0)))))
(define Prelude-compare_Ord__Prec (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((4) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((4) (let ((v-3 (vector-ref sc1 1))) (Prelude-compare_Ord__Nat v-2 v-3)))(else (Prelude-compare_Ord__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))(else (Prelude-compare_Ord__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))
(define Prelude-compare_Ord__Nat (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (let ((sc1 v-1)) (cond ((equal? sc1 0) (vector 1 ))(else (let ((v-2 (- v-1 1))) (vector 0 ))))))(else (let ((v-2 (- v-0 1))) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 2 ))(else (let ((v-3 (- v-1 1))) (Prelude-compare_Ord__Nat v-2 v-3)))))))))))
(define Prelude-compare_Ord__Integer (lambda (v-0 v-1) (Prelude-case--1152-1419 v-1 v-0 (Prelude-C-60_Ord__Integer v-0 v-1))))
(define Prelude-compare_Ord__Int (lambda (v-0 v-1) (Prelude-case--1047-1312 v-1 v-0 (Prelude-C-60_Ord__Int v-0 v-1))))
(define Prelude-compare_Ord__Char (lambda (v-0 v-1) (Prelude-case--1467-1740 v-1 v-0 (Prelude-C-60_Ord__Char v-0 v-1))))
(define Prelude-cast_Cast__Char_Int (lambda () (lambda (v-0) (char->integer v-0))))
(define Prelude-__Ord_C-40EqC-32tyC-41 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) v-3))))))))))))))
(define Prelude-__Monoid_C-40SemigroupC-32tyC-41 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) v-3))))))))
(define Prelude-__Integral_C-40NumC-32tyC-41 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) v-3)))))))))
(define Prelude-__Impl_Traversable_List (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__List 4294 4294 v-2 v-3)))))) (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-foldr_Foldable__List 4294 4294 v-2 v-3 v-4)))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-foldl_Foldable__List 4294 4294 v-2 v-3 v-4))))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (Prelude-traverse_Traversable__List 4294 4294 4294 v-3 v-4 v-5))))))))))
(define Prelude-__Impl_Show_Int (lambda () (vector 0 4294 (lambda (v-0) (Prelude-show_Show__Int v-0)) (lambda (v-0) (lambda (v-1) (((Prelude-showPrec_Show__Int) v-0) v-1))))))
(define Prelude-__Impl_Semigroup_C-40ListC-32C-36aC-41 (lambda (v-0) (vector 0 4294 (lambda (v-1) (lambda (v-2) (((Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 4294) v-1) v-2))))))
(define Prelude-__Impl_Range_C-36a (lambda (v-0 v-1) (vector 0 4294 (lambda (v-2) (lambda (v-3) (Prelude-rangeFromTo_Range__C-36a 4294 v-1 v-2 v-3))) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-rangeFromThenTo_Range__C-36a 4294 v-1 v-2 v-3 v-4)))) (lambda (v-2) (Prelude-rangeFrom_Range__C-36a 4294 v-1 v-2)) (lambda (v-2) (lambda (v-3) (Prelude-rangeFromThen_Range__C-36a 4294 v-1 v-2 v-3))))))
(define Prelude-__Impl_Ord_Prec (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Prec v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Prec v-0 v-1))))))
(define Prelude-__Impl_Ord_Nat (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Nat v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Nat v-0 v-1))))))
(define Prelude-__Impl_Ord_Integer (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Integer v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Integer v-0 v-1))))))
(define Prelude-__Impl_Ord_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Int v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Int v-0 v-1))))))
(define Prelude-__Impl_Ord_Char (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Char v-0 v-1)))) (lambda (v-0) (lambda (v-1) (Prelude-compare_Ord__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60_Ord__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62_Ord__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-60C-61_Ord__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-62C-61_Ord__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-max_Ord__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-min_Ord__Char v-0 v-1))))))
(define Prelude-__Impl_Num_Nat (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Nat) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Nat) v-0) v-1))) (lambda (v-0) (Prelude-fromInteger_Num__Nat v-0)))))
(define Prelude-__Impl_Num_Integer (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Integer) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Integer) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Integer) v-0)))))
(define Prelude-__Impl_Num_Int (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0)))))
(define Prelude-__Impl_Neg_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0))) (lambda (v-0) (Prelude-negate_Neg__Int v-0)) (lambda (v-0) (lambda (v-1) (((Prelude-C-45_Neg__Int) v-0) v-1))))))
(define Prelude-__Impl_Monad_Maybe (lambda () (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__Maybe 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) ((Prelude-pure_Applicative__Maybe 4294) v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-62C-62C-61_Monad__Maybe 4294 4294 v-2 v-3))))) (lambda (v-0) (lambda (v-1) (Prelude-join_Monad__Maybe 4294 v-1))))))
(define Prelude-__Impl_Monad_List (lambda () (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__List 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__List 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__List 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-62C-62C-61_Monad__List 4294 4294 v-2 v-3))))) (lambda (v-0) (lambda (v-1) (Prelude-join_Monad__List 4294 v-1))))))
(define Prelude-__Impl_Monad_IO (lambda () (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__IO 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__IO 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__IO 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-62C-62C-61_Monad__IO 4294 4294 v-2 v-3))))) (lambda (v-0) (lambda (v-1) (Prelude-join_Monad__IO 4294 v-1))))))
(define Prelude-__Impl_Integral_Int (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (((Prelude-C-43_Num__Int) v-0) v-1))) (lambda (v-0) (lambda (v-1) (((Prelude-C-42_Num__Int) v-0) v-1))) (lambda (v-0) ((Prelude-fromInteger_Num__Int) v-0))) (lambda (v-0) (lambda (v-1) (Prelude-div_Integral__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-mod_Integral__Int v-0 v-1))))))
(define Prelude-__Impl_Functor_Maybe (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__Maybe 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Functor_List (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__List 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Functor_IO (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__IO 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Foldable_List (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-foldr_Foldable__List 4294 4294 v-2 v-3 v-4)))))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (Prelude-foldl_Foldable__List 4294 4294 v-2 v-3 v-4)))))))))
(define Prelude-__Impl_Eq_Prec (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Prec v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Prec v-0 v-1))))))
(define Prelude-__Impl_Eq_Ordering (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Ordering v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Ordering v-0 v-1))))))
(define Prelude-__Impl_Eq_Nat (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Nat v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Nat v-0 v-1))))))
(define Prelude-__Impl_Eq_Integer (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Integer v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Integer v-0 v-1))))))
(define Prelude-__Impl_Eq_Int (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Int v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Int v-0 v-1))))))
(define Prelude-__Impl_Eq_Char (lambda () (vector 0 4294 (lambda (v-0) (lambda (v-1) (Prelude-C-61C-61_Eq__Char v-0 v-1))) (lambda (v-0) (lambda (v-1) (Prelude-C-47C-61_Eq__Char v-0 v-1))))))
(define Prelude-__Impl_Eq_C-40ListC-32C-36aC-41 (lambda (v-0 v-1) (vector 0 4294 (lambda (v-2) (lambda (v-3) (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 v-1 v-2 v-3))) (lambda (v-2) (lambda (v-3) (Prelude-C-47C-61_Eq__C-40ListC-32C-36aC-41 4294 v-1 v-2 v-3))))))
(define Prelude-__Impl_Cast_Char_Int (lambda () (vector 0 4294 4294 (lambda (v-0) ((Prelude-cast_Cast__Char_Int) v-0)))))
(define Prelude-__Impl_Applicative_Maybe (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__Maybe 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) ((Prelude-pure_Applicative__Maybe 4294) v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Applicative_List (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__List 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__List 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__List 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Applicative_IO (lambda () (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__IO 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__IO 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__IO 4294 4294 v-2 v-3))))))))
(define Prelude-__Impl_Alternative_Maybe (lambda () (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__Maybe 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) ((Prelude-pure_Applicative__Maybe 4294) v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__Maybe 4294 4294 v-2 v-3)))))) (lambda (v-0) (Prelude-empty_Alternative__Maybe 4294)) (lambda (v-0) (lambda (v-1) (lambda (v-2) (Prelude-C-60C-124C-62_Alternative__Maybe 4294 v-1 v-2)))))))
(define Prelude-__Impl_Alternative_List (lambda () (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-map_Functor__List 4294 4294 v-2 v-3)))))) (lambda (v-0) (lambda (v-1) (Prelude-pure_Applicative__List 4294 v-1))) (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (Prelude-C-60C-42C-62_Applicative__List 4294 4294 v-2 v-3)))))) (lambda (v-0) (Prelude-empty_Alternative__List 4294)) (lambda (v-0) (lambda (v-1) (lambda (v-2) (((Prelude-C-60C-124C-62_Alternative__List 4294) v-1) v-2)))))))
(define Prelude-__Alternative_C-40ApplicativeC-32fC-41 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) v-3)))))))))
(define Prelude-C-62_Ord__Prec (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 2 ))))
(define Prelude-C-62_Ord__Nat (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 2 ))))
(define Prelude-C-62_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (> v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (> v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62_Ord__Char (lambda (v-0 v-1) (let ((sc0 (or (and (char>? v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62C-62C-61_Monad__Maybe (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (v-3 v-5))))))))
(define Prelude-C-62C-62C-61_Monad__List (lambda (v-0 v-1 v-2 v-3) ((Prelude-concatMap 4294 4294 4294 (vector 0 4294 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldr_Foldable__List 4294 4294 v-6 v-7 v-8)))))) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldl_Foldable__List 4294 4294 v-6 v-7 v-8))))))) (vector 0 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (((Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 4294) v-4) v-5)))) (Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 4294))) v-3) v-2)))
(define Prelude-C-62C-62C-61_Monad__IO (lambda (v-0 v-1 v-2 v-3) ((PrimIO-io_bind 4294 4294 v-2) v-3)))
(define Prelude-C-62C-61_Ord__Prec (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 0 ))))
(define Prelude-C-62C-61_Ord__Nat (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 0 ))))
(define Prelude-C-62C-61_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (>= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62C-61_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (>= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-62C-61_Ord__Char (lambda (v-0 v-1) (let ((sc0 (or (and (char>=? v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__Prec (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((4) (let ((v-2 (vector-ref sc0 1))) (let ((sc1 v-1)) (case (get-tag sc1) ((4) (let ((v-3 (vector-ref sc1 1))) (Prelude-C-61C-61_Eq__Nat v-2 v-3)))(else (Prelude-C-61C-61_Eq__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))(else (Prelude-C-61C-61_Eq__Integer (Prelude-precCon v-0) (Prelude-precCon v-1)))))))
(define Prelude-C-61C-61_Eq__Ordering (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((sc1 v-1)) (case (get-tag sc1) ((0) (vector 0 ))(else (vector 1 ))))) ((1) (let ((sc1 v-1)) (case (get-tag sc1) ((1) (vector 0 ))(else (vector 1 ))))) ((2) (let ((sc1 v-1)) (case (get-tag sc1) ((2) (vector 0 ))(else (vector 1 )))))(else (vector 1 ))))))
(define Prelude-C-61C-61_Eq__Nat (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) (let ((sc1 v-1)) (cond ((equal? sc1 0) (vector 0 ))(else (vector 1 )))))(else (let ((v-2 (- v-0 1))) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 1 ))(else (let ((v-3 (- v-1 1))) (Prelude-C-61C-61_Eq__Nat v-2 v-3)))))))))))
(define Prelude-C-61C-61_Eq__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__Int (lambda (v-0 v-1) (let ((sc0 (or (and (= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__Char (lambda (v-0 v-1) (let ((sc0 (or (and (char=? v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((sc1 v-3)) (case (get-tag sc1) ((0) (let ((v-5 (vector-ref sc1 1))) (vector 0 )))(else (vector 1 )))))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((sc1 v-3)) (case (get-tag sc1) ((1) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) (Prelude-C-38C-38 (let ((sc2 v-1)) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (let ((v-11 (vector-ref sc2 2))) (let ((v-12 (vector-ref sc2 3))) ((v-11 v-5) v-8))))))) (lambda () (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 v-1 v-6 v-9)))))))(else (vector 1 ))))))))(else (vector 1 ))))))
(define Prelude-C-60C-124C-62_Alternative__Maybe (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (case (get-tag sc0) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (vector 1 4294 v-4)))) ((0) (let ((v-3 (vector-ref sc0 1))) v-2))))))
(define Prelude-C-60C-124C-62_Alternative__List (lambda (v-0) (lambda (v-1) (lambda (v-2) (List-Prelude-C-43C-43 4294 v-1 v-2)))))
(define Prelude-C-60_Ord__Prec (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 0 ))))
(define Prelude-C-60_Ord__Nat (lambda (v-0 v-1) (Prelude-C-61C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 0 ))))
(define Prelude-C-60_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (< v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (< v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60_Ord__Char (lambda (v-0 v-1) (let ((sc0 (or (and (char<? v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-61_Ord__Prec (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Prec v-0 v-1) (vector 2 ))))
(define Prelude-C-60C-61_Ord__Nat (lambda (v-0 v-1) (Prelude-C-47C-61_Eq__Ordering (Prelude-compare_Ord__Nat v-0 v-1) (vector 2 ))))
(define Prelude-C-60C-61_Ord__Integer (lambda (v-0 v-1) (let ((sc0 (or (and (<= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-61_Ord__Int (lambda (v-0 v-1) (let ((sc0 (or (and (<= v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-61_Ord__Char (lambda (v-0 v-1) (let ((sc0 (or (and (char<=? v-0 v-1) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 (lambda (v-0) (lambda (v-1) (lambda (v-2) (List-Prelude-C-43C-43 4294 v-1 v-2)))))
(define Prelude-C-60C-42C-62_Applicative__Maybe (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((sc1 v-3)) (case (get-tag sc1) ((1) (let ((v-6 (vector-ref sc1 1))) (let ((v-7 (vector-ref sc1 2))) (vector 1 4294 (v-5 v-7)))))(else (vector 0 4294)))))))(else (vector 0 4294))))))
(define Prelude-C-60C-42C-62_Applicative__List (lambda (v-0 v-1 v-2 v-3) ((Prelude-concatMap 4294 4294 4294 (vector 0 4294 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldr_Foldable__List 4294 4294 v-6 v-7 v-8)))))) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-foldl_Foldable__List 4294 4294 v-6 v-7 v-8))))))) (vector 0 4294 (vector 0 4294 (lambda (v-4) (lambda (v-5) (((Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 4294) v-4) v-5)))) (Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 4294))) (lambda (v-4) (Prelude-map_Functor__List 4294 4294 v-4 v-3))) v-2)))
(define Prelude-C-60C-42C-62_Applicative__IO (lambda (v-0 v-1 v-2 v-3) ((PrimIO-io_bind 4294 4294 v-2) (lambda (v-4) ((PrimIO-io_bind 4294 4294 v-3) (lambda (v-5) (PrimIO-io_pure 4294 (v-4 v-5))))))))
(define Prelude-C-47C-61_Eq__Prec (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Prec v-0 v-1))))
(define Prelude-C-47C-61_Eq__Ordering (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Ordering v-0 v-1))))
(define Prelude-C-47C-61_Eq__Nat (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Nat v-0 v-1))))
(define Prelude-C-47C-61_Eq__Integer (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Integer v-0 v-1))))
(define Prelude-C-47C-61_Eq__Int (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Int v-0 v-1))))
(define Prelude-C-47C-61_Eq__Char (lambda (v-0 v-1) (Prelude-not (Prelude-C-61C-61_Eq__Char v-0 v-1))))
(define Prelude-C-47C-61_Eq__C-40ListC-32C-36aC-41 (lambda (v-0 v-1 v-2 v-3) (Prelude-not (Prelude-C-61C-61_Eq__C-40ListC-32C-36aC-41 4294 v-1 v-2 v-3))))
(define Prelude-C-45_Neg__Int (lambda () (lambda (v-0) (lambda (v-1) (b- v-0 v-1 63)))))
(define Prelude-C-43_Num__Nat (lambda () (lambda (v-0) (lambda (v-1) (+ v-0 v-1)))))
(define Prelude-C-43_Num__Integer (lambda () (lambda (v-0) (lambda (v-1) (+ v-0 v-1)))))
(define Prelude-C-43_Num__Int (lambda () (lambda (v-0) (lambda (v-1) (b+ v-0 v-1 63)))))
(define Prelude-C-42_Num__Nat (lambda () (lambda (v-0) (lambda (v-1) (* v-0 v-1)))))
(define Prelude-C-42_Num__Integer (lambda () (lambda (v-0) (lambda (v-1) (* v-0 v-1)))))
(define Prelude-C-42_Num__Int (lambda () (lambda (v-0) (lambda (v-1) (b* v-0 v-1 63)))))
(define Prelude-a-7705 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-0))))))))
(define Prelude-a-7648 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-0))))))))
(define Prelude-a-7583 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 v-0)))))))
(define Prelude-a-7534 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 v-0)))))))
(define Prelude-a-6873 (lambda () (lambda (v-0) (lambda (v-1) (vector 114 v-0)))))
(define Prelude-a-6871 (lambda () (lambda (v-0) (lambda (v-1) (vector 114 v-0)))))
(define Prelude-_-6861 (lambda () (lambda (v-0) (vector 114 ((Prelude-m-6839) v-0)))))
(define Prelude-_-6844 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-1 (lambda (v-3) ((Prelude-m-6839) v-0))))))))
(define Prelude-_-6843 (lambda () (lambda (v-0) (lambda (v-1) ((Prelude-m-6839) v-1)))))
(define Prelude-m-6839 (lambda () (lambda (v-0) (vector 114 v-0))))
(define Prelude-_-6825 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-a-6824 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-_-6795 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 114 v-1))))))
(define Prelude-_-6794 (lambda () (lambda (v-0) (lambda (v-1) (vector 114 (vector 1 v-1 (lambda (v-2) v-0)))))))
(define Prelude-f-6785 (lambda () (lambda (v-0) (vector 114 v-0))))
(define Prelude-_-6753 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) ((Prelude-f-6749) v-1))))))
(define Prelude-_-6752 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 v-1 (lambda (v-2) v-0))))))
(define Prelude-f-6749 (lambda () (lambda (v-0) (vector 114 v-0))))
(define Prelude-a-5566 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 1 ((((((((Prelude-a-5563) v-0) v-1) v-2) v-3) v-4) v-5) v-6) (lambda (v-7) ((((((((Prelude-b-5562) v-0) v-1) v-2) v-3) v-4) v-5) v-6))))))))))))
(define Prelude-a-5563 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) v-0)))))))))
(define Prelude-b-5562 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 1 ((((((((Prelude-a-5559) v-0) v-1) v-2) v-3) v-4) v-5) v-6) (lambda (v-7) ((((((((Prelude-b-5558) v-0) v-1) v-2) v-3) v-4) v-5) v-6))))))))))))
(define Prelude-a-5559 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 109 v-0))))))))))
(define Prelude-b-5558 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 109 v-0))))))))))
(define Prelude-a-5540 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-0))))))))
(define Prelude-_-5492 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) ((Prelude-t-5484) v-1))))))))
(define Prelude-_-5491 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) (v-2 v-0)))))))))
(define Prelude-_-5490 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 113 v-2))))))
(define Prelude-_-5489 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 (vector 2 ) (lambda (v-2) (vector 2 )))))))
(define Prelude-t-5484 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-sa-5475 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 107 (((((Prelude-m-5469) v-0) v-1) v-2) v-3))))))))
(define Prelude-sa-5474 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 111 (lambda (v-4) (vector 109 v-4)))))))))
(define Prelude-m-5469 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 v-0)))))))
(define Prelude-a-5461 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-0)))))
(define Prelude-a-5459 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-0)))))
(define Prelude-_-5449 (lambda () (lambda (v-0) (vector 109 ((Prelude-m-5427) v-0)))))
(define Prelude-_-5432 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-1 (lambda (v-3) ((Prelude-m-5427) v-0))))))))
(define Prelude-_-5431 (lambda () (lambda (v-0) (lambda (v-1) ((Prelude-m-5427) v-1)))))
(define Prelude-m-5427 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-_-5404 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-0)))))
(define Prelude-_-5403 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-f-5398 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-sa-5391 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 107 (((((Prelude-m-5376) v-0) v-1) v-2) v-3))))))))
(define Prelude-sa-5390 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 111 (lambda (v-4) (vector 109 v-4)))))))))
(define Prelude-m-5376 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 v-0)))))))
(define Prelude-a-5375 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-_-5345 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 v-1))))))
(define Prelude-_-5344 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 (vector 1 v-1 (lambda (v-2) v-0)))))))
(define Prelude-f-5335 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-_-5269 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 v-0)))))))
(define Prelude-_-5267 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 v-1 (lambda (v-2) (vector 1 v-0 (lambda (v-3) v-1))))))))
(define Prelude-_-5249 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) ((Prelude-t-5244) v-1)))))))
(define Prelude-_-5247 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 v-1 (lambda (v-2) (vector 1 v-0 (lambda (v-3) v-0))))))))
(define Prelude-t-5244 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-ty-5231 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-ty-5220 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-_-5179 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) ((Prelude-f-5175) v-1))))))
(define Prelude-_-5178 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 v-1 (lambda (v-2) v-0))))))
(define Prelude-f-5175 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Prelude-a-4874 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) v-0))))))
(define Prelude-ty-4873 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 109 (((((Prelude-a-4874) v-0) v-1) v-2) v-3))))))))
(define Prelude-_-4865 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 109 v-0))))))
(define Prelude-_-4864 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-0)))))
(define Prelude-ty-4858 (lambda () (lambda (v-0) (lambda (v-1) (vector 109 v-0)))))
(define Prelude-a-4320 (lambda () (lambda (v-0) (lambda (v-1) (vector 108 v-0)))))
(define Prelude-a-4318 (lambda () (lambda (v-0) (lambda (v-1) (vector 108 v-0)))))
(define Prelude-_-4308 (lambda () (lambda (v-0) (vector 108 ((Prelude-m-4286) v-0)))))
(define Prelude-_-4291 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-1 (lambda (v-3) ((Prelude-m-4286) v-0))))))))
(define Prelude-_-4290 (lambda () (lambda (v-0) (lambda (v-1) ((Prelude-m-4286) v-1)))))
(define Prelude-m-4286 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Prelude-_-4255 (lambda () (lambda (v-0) (lambda (v-1) (vector 108 v-0)))))
(define Prelude-_-4254 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Prelude-f-4249 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Prelude-_-4202 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 108 v-1))))))
(define Prelude-_-4201 (lambda () (lambda (v-0) (lambda (v-1) (vector 108 (vector 1 v-1 (lambda (v-2) v-0)))))))
(define Prelude-f-4192 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Prelude-_-4153 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) ((Prelude-f-4149) v-1))))))
(define Prelude-_-4152 (lambda () (lambda (v-0) (lambda (v-1) (vector 1 v-1 (lambda (v-2) v-0))))))
(define Prelude-f-4149 (lambda () (lambda (v-0) (vector 108 v-0))))
(define Prelude-_-3501 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (v-3 v-1))))))))))))
(define Prelude-_-3500 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (lambda (v-7) (vector 1 v-1 (lambda (v-8) (v-2 v-0)))))))))))))
(define Prelude-b-3143 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) v-1)))))))
(define Prelude-c-3142 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 1 ((((((Prelude-b-3143) v-0) v-1) v-2) v-3) v-4) (lambda (v-5) ((((((Prelude-b-3143) v-0) v-1) v-2) v-3) v-4))))))))))
(define Prelude-_-3051 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (v-2 v-0))))))))))
(define Prelude-_-3049 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 1 v-1 (lambda (v-5) (vector 1 v-0 (lambda (v-6) v-1)))))))))))
(define Prelude-_-3024 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (v-2 v-1))))))))))
(define Prelude-_-3022 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 1 v-1 (lambda (v-5) (vector 1 v-0 (lambda (v-6) v-0)))))))))))
(define Prelude-_-2887 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 1 v-1 (lambda (v-7) (v-2 v-0))))))))))))
(define Prelude-_-2886 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (v-2 v-1)))))))))
(define Prelude-_-2846 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (v-1 v-0)))))))))
(define Prelude-_-2845 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (v-1 v-0))))))))
(define Prelude-_-2739 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (v-2 v-1))))))))))
(define Prelude-_-2738 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (v-2 (vector 1 v-1 (lambda (v-6) v-0)))))))))))
(define Prelude-_-2641 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (v-2 v-1))))))))
(define Prelude-_-2640 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (vector 1 v-1 (lambda (v-4) v-0))))))))
(define Prelude-C-124C-124 (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (v-1))))))
(define Prelude-unpack (lambda (v-0) (n--5074-5749-unpackC-39 v-0 ((Prelude-fromInteger_Num__Int) 0) (Prelude-length v-0) v-0)))
(define Prelude-traverse (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (let ((v-7 (vector-ref sc0 2))) (let ((v-8 (vector-ref sc0 3))) (let ((v-9 (vector-ref sc0 4))) (lambda (v-10) (lambda (v-11) ((((((v-9 4294) 4294) 4294) v-4) v-10) v-11))))))))))))
(define Prelude-takeUntil (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (Prelude-case--6382-7106 4294 v-4 v-5 v-1 (v-1 v-4))))))))))
(define Prelude-takeBefore (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (Prelude-case--6425-7148 4294 v-4 v-5 v-1 (v-1 v-4))))))))))
(define Prelude-take (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 0 4294))(else (let ((v-3 (- v-1 1))) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (vector 1 4294 v-5 (Prelude-take 4294 v-3 (v-6)))))))))))))))
(define Prelude-strCons (lambda () (lambda (v-0) (lambda (v-1) (string-cons v-0 v-1)))))
(define Prelude-showPrec (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-4 v-5) v-6)))))))))))
(define Prelude-showParens (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((1) v-1) ((0) (Strings-Prelude-C-43C-43 "(" (Strings-Prelude-C-43C-43 v-1 ")")))))))
(define Prelude-show (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (v-3 v-5))))))))))
(define Prelude-rangeFromTo (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (lambda (v-7) (lambda (v-8) ((v-3 v-7) v-8)))))))))))))
(define Prelude-rangeFrom (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (lambda (v-7) (v-5 v-7))))))))))))
(define Prelude-pure (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (lambda (v-7) ((v-5 4294) v-7)))))))))))
(define Prelude-primNumShow (lambda (v-0 v-1 v-2 v-3) (let ((v-4 (v-1 v-3))) (Prelude-showParens (Prelude-C-38C-38 (Prelude-C-62C-61_Ord__Prec v-2 (vector 5 )) (lambda () (Prelude-firstCharIs (lambda (v-5) (Prelude-C-61C-61_Eq__Char v-5 #\-)) v-4))) v-4))))
(define Prelude-precCon (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) ((Prelude-fromInteger_Num__Integer) 0)) ((1) ((Prelude-fromInteger_Num__Integer) 1)) ((2) ((Prelude-fromInteger_Num__Integer) 2)) ((3) ((Prelude-fromInteger_Num__Integer) 3)) ((4) (let ((v-1 (vector-ref sc0 1))) ((Prelude-fromInteger_Num__Integer) 4))) ((5) ((Prelude-fromInteger_Num__Integer) 5)) ((6) ((Prelude-fromInteger_Num__Integer) 6))))))
(define Prelude-plus (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) v-1)(else (let ((v-2 (- v-0 1))) (+ 1 (+ v-2 v-1))))))))
(define Prelude-pack (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((v-1 (vector-ref sc0 1))) "")) ((1) (let ((v-1 (vector-ref sc0 1))) (let ((v-2 (vector-ref sc0 2))) (let ((v-3 (vector-ref sc0 3))) (((Prelude-strCons) v-2) (Prelude-pack v-3))))))))))
(define Prelude-not (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (vector 1 )) ((1) (vector 0 ))))))
(define Prelude-neutral (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) v-4))))))))
(define Prelude-natToInteger (lambda (v-0) (let ((sc0 v-0)) (cond ((equal? sc0 0) ((Prelude-fromInteger_Num__Integer) 0))(else (let ((v-1 (- v-0 1))) (((Prelude-C-43_Num__Integer) ((Prelude-fromInteger_Num__Integer) 1)) v-1)))))))
(define Prelude-mult (lambda (v-0 v-1) (let ((sc0 v-0)) (cond ((equal? sc0 0) 0)(else (let ((v-2 (- v-0 1))) (+ v-1 (* v-2 v-1))))))))
(define Prelude-mod (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-5 v-6) v-7))))))))))))
(define Prelude-map (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (lambda (v-6) (lambda (v-7) ((((v-5 4294) 4294) v-6) v-7))))))))))
(define Prelude-length (lambda (v-0) (Prelude-fromInteger_Num__Nat (string-length v-0))))
(define Prelude-isDigit (lambda (v-0) (Prelude-C-38C-38 (Prelude-C-62C-61_Ord__Char v-0 #\0) (lambda () (Prelude-C-60C-61_Ord__Char v-0 #\9)))))
(define Prelude-integerToNat (lambda (v-0) (Prelude-case--3176-3576 v-0 (let ((sc0 (or (and (<= v-0 ((Prelude-fromInteger_Num__Integer) 0)) 1) 0))) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 )))))))
(define Prelude-intToBool (lambda (v-0) (let ((sc0 v-0)) (cond ((equal? sc0 0) (vector 1 ))(else (vector 0 ))))))
(define Prelude-id (lambda (v-0 v-1) v-1))
(define Prelude-guard (lambda (v-0 v-1 v-2) (Prelude-case--2682-2959 4294 v-1 v-2)))
(define Prelude-fromInteger (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (v-5 v-6)))))))))))
(define Prelude-foldr (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (lambda (v-7) (lambda (v-8) (lambda (v-9) (((((v-5 4294) 4294) v-7) v-8) v-9))))))))))))
(define Prelude-foldl (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (lambda (v-7) (lambda (v-8) (lambda (v-9) (((((v-6 4294) 4294) v-7) v-8) v-9))))))))))))
(define Prelude-firstCharIs (lambda (v-0 v-1) (let ((sc0 v-1)) (cond ((equal? sc0 "") (vector 1 ))(else (v-0 (string-ref v-1 0)))))))
(define Prelude-empty (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (v-5 4294))))))))))
(define Prelude-elem (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 1 ))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (Prelude-case--4907-5611 4294 v-1 v-2 v-5 v-6 (let ((sc1 v-1)) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) ((v-8 v-2) v-5))))))))))))))))
(define Prelude-div (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-4 v-6) v-7))))))))))))
(define Prelude-countFrom (lambda (v-0 v-1 v-2) (vector 0 4294 v-1 (lambda () (Prelude-countFrom 4294 (v-2 v-1) v-2)))))
(define Prelude-const (lambda (v-0 v-1 v-2) (lambda (v-3) v-2)))
(define Prelude-concatMap (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 (Builtin-fst 4294 4294 v-3))) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (lambda (v-8) (((((v-6 4294) 4294) (lambda (v-9) (let ((sc1 (let ((sc2 (Builtin-snd 4294 4294 v-3))) (case (get-tag sc2) ((0) (let ((v-10 (vector-ref sc2 1))) (let ((v-11 (vector-ref sc2 2))) (let ((v-12 (vector-ref sc2 3))) v-11)))))))) (case (get-tag sc1) ((0) (let ((v-10 (vector-ref sc1 1))) (let ((v-11 (vector-ref sc1 2))) (lambda (v-12) ((v-11 (v-4 v-9)) v-12))))))))) (let ((sc1 (Builtin-snd 4294 4294 v-3))) (case (get-tag sc1) ((0) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) v-11))))))) v-8))))))))))
(define Prelude-concat (lambda (v-0 v-1 v-2) (let ((sc0 (Builtin-fst 4294 4294 v-2))) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (lambda (v-6) (((((v-4 4294) 4294) (let ((sc1 (let ((sc2 (Builtin-snd 4294 4294 v-2))) (case (get-tag sc2) ((0) (let ((v-7 (vector-ref sc2 1))) (let ((v-8 (vector-ref sc2 2))) (let ((v-9 (vector-ref sc2 3))) v-8)))))))) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (lambda (v-9) (lambda (v-10) ((v-8 v-9) v-10))))))))) (let ((sc1 (Builtin-snd 4294 4294 v-2))) (case (get-tag sc1) ((0) (let ((v-7 (vector-ref sc1 1))) (let ((v-8 (vector-ref sc1 2))) (let ((v-9 (vector-ref sc1 3))) v-9))))))) v-6))))))))))
(define Prelude-compare (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-4 v-11) v-12)))))))))))))))))
(define Prelude-cast (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (lambda (v-6) (v-5 v-6))))))))))
(define Prelude-any (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (lambda (v-7) (((((v-6 4294) 4294) (lambda (v-8) (lambda (v-9) (Prelude-C-124C-124 v-8 (lambda () (v-3 v-9)))))) (vector 1 )) v-7))))))))))
(define Prelude-all (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (lambda (v-7) (((((v-6 4294) 4294) (lambda (v-8) (lambda (v-9) (Prelude-C-38C-38 v-8 (lambda () (v-3 v-9)))))) (vector 0 )) v-7))))))))))
(define Prelude-C-62C-62C-61 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) (lambda (v-8) (lambda (v-9) ((((v-6 4294) 4294) v-8) v-9))))))))))))
(define Prelude-C-62C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-8 v-11) v-12)))))))))))))))))
(define Prelude-C-62 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-6 v-11) v-12)))))))))))))))))
(define Prelude-C-61C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-3 v-5) v-6)))))))))))
(define Prelude-C-60C-124C-62 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) (lambda (v-7) (lambda (v-8) (((v-6 4294) v-7) v-8))))))))))))
(define Prelude-C-60C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-7 v-11) v-12)))))))))))))))))
(define Prelude-C-60C-43C-62 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (lambda (v-4) (lambda (v-5) ((v-3 v-4) v-5))))))))))
(define Prelude-C-60C-42C-62 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (let ((v-7 (vector-ref sc0 4))) (lambda (v-8) (lambda (v-9) ((((v-7 4294) 4294) v-8) v-9))))))))))))
(define Prelude-C-60 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (let ((v-6 (vector-ref sc0 5))) (let ((v-7 (vector-ref sc0 6))) (let ((v-8 (vector-ref sc0 7))) (let ((v-9 (vector-ref sc0 8))) (let ((v-10 (vector-ref sc0 9))) (lambda (v-11) (lambda (v-12) ((v-5 v-11) v-12)))))))))))))))))
(define Prelude-C-47C-61 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-4 v-5) v-6)))))))))))
(define Prelude-C-46 (lambda (v-0 v-1 v-2 v-3 v-4) (lambda (v-5) (v-3 (v-4 v-5)))))
(define Prelude-C-45 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-5 v-6) v-7))))))))))))
(define Strings-Prelude-C-43C-43 (lambda (v-0 v-1) (string-append v-0 v-1)))
(define List-Prelude-C-43C-43 (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) v-2)) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (vector 1 4294 v-4 (List-Prelude-C-43C-43 4294 v-5 v-2))))))))))
(define Prelude-C-43 (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (let ((v-5 (vector-ref sc0 4))) (lambda (v-6) (lambda (v-7) ((v-3 v-6) v-7))))))))))))
(define Prelude-C-38C-38 (lambda (v-0 v-1) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (v-1)) ((1) (vector 1 ))))))
(define PrimIO-case--307-333 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (PrimIO-unsafeDestroyWorld 4294 v-6 v-5)))))))))
(define PrimIO-case--187-250 (lambda (v-0 v-1 v-2 v-3 v-4 v-5 v-6 v-7) (let ((sc0 v-7)) (case (get-tag sc0) ((0) (let ((v-8 (vector-ref sc0 1))) (let ((v-9 (vector-ref sc0 2))) (v-9 v-6))))))))
(define PrimIO-case--172-231 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (let ((v-7 (vector-ref sc0 2))) (let ((v-8 (vector-ref sc0 3))) (PrimIO-case--187-250 4294 4294 4294 4294 4294 v-7 v-8 (v-3 v-7))))))))))
(define PrimIO-_-222 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (vector 1 v-1 (lambda (v-3) (vector 114 v-0))))))))
(define PrimIO-unsafePerformIO (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (PrimIO-unsafeCreateWorld 4294 (lambda (v-4) (PrimIO-case--307-333 4294 v-3 4294 (v-3 v-4)))))))))))
(define PrimIO-unsafeDestroyWorld (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 #f) v-2)))))
(define PrimIO-unsafeCreateWorld (lambda (v-0 v-1) (v-1 #f)))
(define PrimIO-putStrLn (lambda (v-0) (PrimIO-putStr (string-append v-0 "\xa;"))))
(define PrimIO-putStr (lambda (v-0) (vector 0 4294 (lambda (v-1) (display v-0) (vector 0 #f (vector 0 ) #f)))))
(define PrimIO-prim__putStr (lambda (v-0 v-1) (display v-0) (vector 0 #f (vector 0 ) #f)))
(define PrimIO-prim__getStr (lambda (v-0) (vector 0 #f (get-line (current-input-port)) #f)))
(define PrimIO-primIO (lambda (v-0 v-1) (vector 0 4294 v-1)))
(define PrimIO-io_pure (lambda (v-0 v-1) (vector 0 4294 (lambda (v-2) (vector 0 4294 v-1 v-2)))))
(define PrimIO-io_bind (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (lambda (v-5) (vector 0 4294 (lambda (v-6) (PrimIO-case--172-231 4294 4294 4294 v-5 4294 (v-4 v-6))))))))))))
(define PrimIO-getLine (lambda () (vector 0 4294 (lambda (v-0) (vector 0 #f (get-line (current-input-port)) #f)))))
(define Builtin-snd (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) v-6)))))))))
(define Builtin-fst (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((v-6 (vector-ref sc0 4))) v-5)))))))))
(define Builtin-assert_total (lambda (v-0 v-1) v-1))
(define n--1905-410-addSpace (lambda (v-0 v-1 v-2) (List-Prelude-C-43C-43 4294 v-1 (vector 1 4294 #\  v-2))))
(define Strings-Data-f-497 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Strings-Data-b-495 (lambda () (vector 109 (vector 6 ))))
(define Strings-Data-b-493 (lambda () (vector 109 (vector 109 (vector 6 )))))
(define Strings-Data-c-492 (lambda () (vector 109 (vector 6 ))))
(define Strings-Data-a-491 (lambda () ((Strings-Data-f-497) (vector 5 ))))
(define Strings-Data-b-489 (lambda () (vector 109 (vector 6 ))))
(define Strings-Data-a-487 (lambda () (vector 109 (vector 5 ))))
(define Strings-Data-f-432 (lambda () (lambda (v-0) (vector 109 v-0))))
(define Strings-Data-b-430 (lambda () (vector 109 (vector 6 ))))
(define Strings-Data-b-428 (lambda () (vector 109 (vector 109 (vector 6 )))))
(define Strings-Data-c-427 (lambda () (vector 109 (vector 6 ))))
(define Strings-Data-a-426 (lambda () ((Strings-Data-f-432) (vector 5 ))))
(define Strings-Data-b-424 (lambda () (vector 109 (vector 6 ))))
(define Strings-Data-a-422 (lambda () (vector 109 (vector 5 ))))
(define Strings-Data-a-418 (lambda () (lambda (v-0) (vector 109 (vector 6 )))))
(define Strings-Data-a-417 (lambda () (lambda (v-0) (vector 109 (vector 6 )))))
(define Strings-Data-unwordsC-39 (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((v-1 (vector-ref sc0 1))) (vector 0 4294)))(else (Strings-Data-foldr1 4294 (lambda (v-1) (lambda (v-2) (n--1905-410-addSpace v-0 v-1 v-2))) v-0))))))
(define Strings-Data-unwords (lambda () (lambda (v-0) (Prelude-pack (Strings-Data-unwordsC-39 (Prelude-map_Functor__List 4294 4294 (lambda (v-1) (Prelude-unpack v-1)) v-0))))))
(define Strings-Data-unlinesC-39 (lambda (v-0) (let ((sc0 v-0)) (case (get-tag sc0) ((0) (let ((v-1 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-1 (vector-ref sc0 1))) (let ((v-2 (vector-ref sc0 2))) (let ((v-3 (vector-ref sc0 3))) (List-Prelude-C-43C-43 4294 v-2 (vector 1 4294 (integer->char 10) (Strings-Data-unlinesC-39 v-3)))))))))))
(define Strings-Data-unlines (lambda () (lambda (v-0) (Prelude-pack (Strings-Data-unlinesC-39 (Prelude-map_Functor__List 4294 4294 (lambda (v-1) (Prelude-unpack v-1)) v-0))))))
(define Strings-Data-foldr1 (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (let ((sc1 v-5)) (case (get-tag sc1) ((0) (let ((v-6 (vector-ref sc1 1))) v-4))(else ((v-1 v-4) (Strings-Data-foldr1 4294 v-1 v-5)))))))))))))
(define n--3347-2106-spreadHeads (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-5 (vector-ref sc0 1))) v-4)) ((1) (let ((v-5 (vector-ref sc0 1))) (let ((v-6 (vector-ref sc0 2))) (let ((v-7 (vector-ref sc0 3))) (let ((sc1 v-4)) (case (get-tag sc1) ((0) (let ((v-8 (vector-ref sc1 1))) (vector 1 4294 (vector 1 4294 v-6 (vector 0 4294)) (n--3347-2106-spreadHeads 4294 v-1 v-2 v-7 (vector 0 4294))))) ((1) (let ((v-8 (vector-ref sc1 1))) (let ((v-9 (vector-ref sc1 2))) (let ((v-10 (vector-ref sc1 3))) (vector 1 4294 (vector 1 4294 v-6 v-9) (n--3347-2106-spreadHeads 4294 v-1 v-2 v-7 v-10))))))))))))))))
(define n--1931-689-nubByC-39 (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (List-Data-case--1935-708 4294 v-5 v-6 v-2 v-1 (List-Data-elemBy 4294 v-2 v-5 v-1))))))))))
(define List-Data-case--1994-782 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) v-3) ((1) (vector 1 4294 v-2 (List-Data-deleteBy 4294 v-4 v-1 v-3)))))))
(define List-Data-case--1935-708 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (n--1931-689-nubByC-39 4294 v-4 v-3 v-2)) ((1) (vector 1 4294 v-1 (n--1931-689-nubByC-39 4294 (vector 1 4294 v-1 v-4) v-3 v-2)))))))
(define List-Data-case--1880-651 (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-5)) (case (get-tag sc0) ((0) (vector 0 )) ((1) (List-Data-elemBy 4294 v-4 v-1 v-3))))))
(define List-Data-case--1719-491 (lambda (v-0 v-1 v-2 v-3 v-4) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (vector 1 4294 v-1 (List-Data-filter 4294 v-3 v-2))) ((1) (List-Data-filter 4294 v-3 v-2))))))
(define List-Data-a-2130 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (lambda (v-5) (lambda (v-6) (vector 109 v-0))))))))))
(define List-Data-a-2119 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-0))))))))
(define List-Data-a-2116 (lambda () (lambda (v-0) (lambda (v-1) (lambda (v-2) (lambda (v-3) (lambda (v-4) (vector 109 v-0))))))))
(define List-Data-a-2100 (lambda () (lambda (v-0) (vector 109 v-0))))
(define List-Data-c-1403 (lambda () (lambda (v-0) (lambda (v-1) (vector 116 v-1 v-0)))))
(define List-Data-zipWith (lambda (v-0 v-1 v-2 v-3 v-4 v-5) (let ((sc0 v-4)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (vector 0 4294)))(else (let ((sc0 v-5)) (case (get-tag sc0) ((0) (let ((v-6 (vector-ref sc0 1))) (vector 0 4294)))(else (let ((sc0 v-4)) (case (get-tag sc0) ((1) (let ((v-6 (vector-ref sc0 1))) (let ((v-7 (vector-ref sc0 2))) (let ((v-8 (vector-ref sc0 3))) (let ((sc1 v-5)) (case (get-tag sc1) ((1) (let ((v-9 (vector-ref sc1 1))) (let ((v-10 (vector-ref sc1 2))) (let ((v-11 (vector-ref sc1 3))) (vector 1 4294 ((v-3 v-7) v-10) (List-Data-zipWith 4294 4294 4294 v-3 v-8 v-11))))))))))))))))))))))
(define List-Data-zip (lambda (v-0 v-1) (lambda (v-2) (lambda (v-3) (List-Data-zipWith 4294 4294 4294 (lambda (v-4) (lambda (v-5) (vector 0 4294 4294 v-4 v-5))) v-2 v-3)))))
(define List-Data-transpose (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (n--3347-2106-spreadHeads 4294 v-3 v-4 v-3 (List-Data-transpose 4294 v-4))))))))))
(define List-Data-take (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 0) (vector 0 4294))(else (let ((v-3 (- v-1 1))) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (vector 1 4294 v-5 (List-Data-take 4294 v-3 v-6))))))))))))))
(define List-Data-nubBy (lambda (v-0) (lambda (v-1) (lambda (v-2) (n--1931-689-nubByC-39 4294 (vector 0 4294) v-1 v-2)))))
(define List-Data-nub (lambda (v-0 v-1) ((List-Data-nubBy 4294) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (lambda (v-5) (lambda (v-6) ((v-3 v-5) v-6))))))))))))
(define List-Data-length (lambda (v-0 v-1) (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-2 (vector-ref sc0 1))) 0)) ((1) (let ((v-2 (vector-ref sc0 1))) (let ((v-3 (vector-ref sc0 2))) (let ((v-4 (vector-ref sc0 3))) (+ 1 (List-Data-length 4294 v-4))))))))))
(define List-Data-intersectBy (lambda (v-0 v-1 v-2 v-3) (Prelude-C-62C-62C-61_Monad__List 4294 4294 v-2 (lambda (v-4) (Prelude-C-62C-62C-61_Monad__List 4294 4294 (Prelude-guard 4294 (vector 0 4294 (vector 0 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-map_Functor__List 4294 4294 v-7 v-8)))))) (lambda (v-5) (lambda (v-6) (Prelude-pure_Applicative__List 4294 v-6))) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (Prelude-C-60C-42C-62_Applicative__List 4294 4294 v-7 v-8)))))) (lambda (v-5) (Prelude-empty_Alternative__List 4294)) (lambda (v-5) (lambda (v-6) (lambda (v-7) (((Prelude-C-60C-124C-62_Alternative__List 4294) v-6) v-7))))) ((Prelude-any 4294 4294 (vector 0 4294 (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (Prelude-foldr_Foldable__List 4294 4294 v-7 v-8 v-9)))))) (lambda (v-5) (lambda (v-6) (lambda (v-7) (lambda (v-8) (lambda (v-9) (Prelude-foldl_Foldable__List 4294 4294 v-7 v-8 v-9))))))) (v-1 v-4)) v-3)) (lambda (v-5) (Prelude-pure_Applicative__List 4294 v-4)))))))
(define List-Data-intersect (lambda (v-0 v-1) (lambda (v-2) (lambda (v-3) (List-Data-intersectBy 4294 (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (lambda (v-7) (lambda (v-8) ((v-5 v-7) v-8))))))))) v-2 v-3)))))
(define List-Data-filter (lambda (v-0 v-1 v-2) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-3 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-3 (vector-ref sc0 1))) (let ((v-4 (vector-ref sc0 2))) (let ((v-5 (vector-ref sc0 3))) (List-Data-case--1719-491 4294 v-4 v-5 v-1 (v-1 v-4))))))))))
(define List-Data-elemBy (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 1 ))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (List-Data-case--1880-651 4294 v-2 v-5 v-6 v-1 ((v-1 v-2) v-5))))))))))
(define List-Data-drop (lambda (v-0 v-1 v-2) (let ((sc0 v-1)) (cond ((equal? sc0 0) v-2)(else (let ((v-3 (- v-1 1))) (let ((sc0 v-2)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (List-Data-drop 4294 v-3 v-6)))))))))))))
(define List-Data-deleteBy (lambda (v-0 v-1 v-2 v-3) (let ((sc0 v-3)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (vector 0 4294))) ((1) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (List-Data-case--1994-782 4294 v-2 v-5 v-6 v-1 ((v-1 v-2) v-5))))))))))
(define List-Data-delete (lambda (v-0 v-1) (lambda (v-2) (lambda (v-3) (List-Data-deleteBy 4294 (let ((sc0 v-1)) (case (get-tag sc0) ((0) (let ((v-4 (vector-ref sc0 1))) (let ((v-5 (vector-ref sc0 2))) (let ((v-6 (vector-ref sc0 3))) (lambda (v-7) (lambda (v-8) ((v-5 v-7) v-8))))))))) v-2 v-3)))))
(PrimIO-unsafePerformIO 4294 (Main-main)))